#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import evernote.edam.limits.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class PrivilegeLevel:
  NORMAL = 1
  PREMIUM = 3
  VIP = 5
  MANAGER = 7
  SUPPORT = 8
  ADMIN = 9

  _VALUES_TO_NAMES = {
    1: "NORMAL",
    3: "PREMIUM",
    5: "VIP",
    7: "MANAGER",
    8: "SUPPORT",
    9: "ADMIN",
  }

  _NAMES_TO_VALUES = {
    "NORMAL": 1,
    "PREMIUM": 3,
    "VIP": 5,
    "MANAGER": 7,
    "SUPPORT": 8,
    "ADMIN": 9,
  }

class ServiceLevel:
  BASIC = 1
  PLUS = 2
  PREMIUM = 3

  _VALUES_TO_NAMES = {
    1: "BASIC",
    2: "PLUS",
    3: "PREMIUM",
  }

  _NAMES_TO_VALUES = {
    "BASIC": 1,
    "PLUS": 2,
    "PREMIUM": 3,
  }

class QueryFormat:
  USER = 1
  SEXP = 2

  _VALUES_TO_NAMES = {
    1: "USER",
    2: "SEXP",
  }

  _NAMES_TO_VALUES = {
    "USER": 1,
    "SEXP": 2,
  }

class NoteSortOrder:
  CREATED = 1
  UPDATED = 2
  RELEVANCE = 3
  UPDATE_SEQUENCE_NUMBER = 4
  TITLE = 5

  _VALUES_TO_NAMES = {
    1: "CREATED",
    2: "UPDATED",
    3: "RELEVANCE",
    4: "UPDATE_SEQUENCE_NUMBER",
    5: "TITLE",
  }

  _NAMES_TO_VALUES = {
    "CREATED": 1,
    "UPDATED": 2,
    "RELEVANCE": 3,
    "UPDATE_SEQUENCE_NUMBER": 4,
    "TITLE": 5,
  }

class PremiumOrderStatus:
  NONE = 0
  PENDING = 1
  ACTIVE = 2
  FAILED = 3
  CANCELLATION_PENDING = 4
  CANCELED = 5

  _VALUES_TO_NAMES = {
    0: "NONE",
    1: "PENDING",
    2: "ACTIVE",
    3: "FAILED",
    4: "CANCELLATION_PENDING",
    5: "CANCELED",
  }

  _NAMES_TO_VALUES = {
    "NONE": 0,
    "PENDING": 1,
    "ACTIVE": 2,
    "FAILED": 3,
    "CANCELLATION_PENDING": 4,
    "CANCELED": 5,
  }

class SharedNotebookPrivilegeLevel:
  READ_NOTEBOOK = 0
  MODIFY_NOTEBOOK_PLUS_ACTIVITY = 1
  READ_NOTEBOOK_PLUS_ACTIVITY = 2
  GROUP = 3
  FULL_ACCESS = 4
  BUSINESS_FULL_ACCESS = 5

  _VALUES_TO_NAMES = {
    0: "READ_NOTEBOOK",
    1: "MODIFY_NOTEBOOK_PLUS_ACTIVITY",
    2: "READ_NOTEBOOK_PLUS_ACTIVITY",
    3: "GROUP",
    4: "FULL_ACCESS",
    5: "BUSINESS_FULL_ACCESS",
  }

  _NAMES_TO_VALUES = {
    "READ_NOTEBOOK": 0,
    "MODIFY_NOTEBOOK_PLUS_ACTIVITY": 1,
    "READ_NOTEBOOK_PLUS_ACTIVITY": 2,
    "GROUP": 3,
    "FULL_ACCESS": 4,
    "BUSINESS_FULL_ACCESS": 5,
  }

class SharedNotePrivilegeLevel:
  READ_NOTE = 0
  MODIFY_NOTE = 1
  FULL_ACCESS = 2

  _VALUES_TO_NAMES = {
    0: "READ_NOTE",
    1: "MODIFY_NOTE",
    2: "FULL_ACCESS",
  }

  _NAMES_TO_VALUES = {
    "READ_NOTE": 0,
    "MODIFY_NOTE": 1,
    "FULL_ACCESS": 2,
  }

class SponsoredGroupRole:
  GROUP_MEMBER = 1
  GROUP_ADMIN = 2
  GROUP_OWNER = 3

  _VALUES_TO_NAMES = {
    1: "GROUP_MEMBER",
    2: "GROUP_ADMIN",
    3: "GROUP_OWNER",
  }

  _NAMES_TO_VALUES = {
    "GROUP_MEMBER": 1,
    "GROUP_ADMIN": 2,
    "GROUP_OWNER": 3,
  }

class BusinessUserRole:
  ADMIN = 1
  NORMAL = 2

  _VALUES_TO_NAMES = {
    1: "ADMIN",
    2: "NORMAL",
  }

  _NAMES_TO_VALUES = {
    "ADMIN": 1,
    "NORMAL": 2,
  }

class SharedNotebookInstanceRestrictions:
  ONLY_JOINED_OR_PREVIEW = 1
  NO_SHARED_NOTEBOOKS = 2

  _VALUES_TO_NAMES = {
    1: "ONLY_JOINED_OR_PREVIEW",
    2: "NO_SHARED_NOTEBOOKS",
  }

  _NAMES_TO_VALUES = {
    "ONLY_JOINED_OR_PREVIEW": 1,
    "NO_SHARED_NOTEBOOKS": 2,
  }

class ReminderEmailConfig:
  DO_NOT_SEND = 1
  SEND_DAILY_EMAIL = 2

  _VALUES_TO_NAMES = {
    1: "DO_NOT_SEND",
    2: "SEND_DAILY_EMAIL",
  }

  _NAMES_TO_VALUES = {
    "DO_NOT_SEND": 1,
    "SEND_DAILY_EMAIL": 2,
  }

class BusinessInvitationStatus:
  APPROVED = 0
  REQUESTED = 1
  REDEEMED = 2

  _VALUES_TO_NAMES = {
    0: "APPROVED",
    1: "REQUESTED",
    2: "REDEEMED",
  }

  _NAMES_TO_VALUES = {
    "APPROVED": 0,
    "REQUESTED": 1,
    "REDEEMED": 2,
  }

class ContactType:
  EVERNOTE = 1
  SMS = 2
  FACEBOOK = 3
  EMAIL = 4
  TWITTER = 5
  LINKEDIN = 6

  _VALUES_TO_NAMES = {
    1: "EVERNOTE",
    2: "SMS",
    3: "FACEBOOK",
    4: "EMAIL",
    5: "TWITTER",
    6: "LINKEDIN",
  }

  _NAMES_TO_VALUES = {
    "EVERNOTE": 1,
    "SMS": 2,
    "FACEBOOK": 3,
    "EMAIL": 4,
    "TWITTER": 5,
    "LINKEDIN": 6,
  }

class RelatedContentType:
  NEWS_ARTICLE = 1
  PROFILE_PERSON = 2
  PROFILE_ORGANIZATION = 3
  REFERENCE_MATERIAL = 4

  _VALUES_TO_NAMES = {
    1: "NEWS_ARTICLE",
    2: "PROFILE_PERSON",
    3: "PROFILE_ORGANIZATION",
    4: "REFERENCE_MATERIAL",
  }

  _NAMES_TO_VALUES = {
    "NEWS_ARTICLE": 1,
    "PROFILE_PERSON": 2,
    "PROFILE_ORGANIZATION": 3,
    "REFERENCE_MATERIAL": 4,
  }

class RelatedContentAccess:
  NOT_ACCESSIBLE = 0
  DIRECT_LINK_ACCESS_OK = 1
  DIRECT_LINK_LOGIN_REQUIRED = 2
  DIRECT_LINK_EMBEDDED_VIEW = 3

  _VALUES_TO_NAMES = {
    0: "NOT_ACCESSIBLE",
    1: "DIRECT_LINK_ACCESS_OK",
    2: "DIRECT_LINK_LOGIN_REQUIRED",
    3: "DIRECT_LINK_EMBEDDED_VIEW",
  }

  _NAMES_TO_VALUES = {
    "NOT_ACCESSIBLE": 0,
    "DIRECT_LINK_ACCESS_OK": 1,
    "DIRECT_LINK_LOGIN_REQUIRED": 2,
    "DIRECT_LINK_EMBEDDED_VIEW": 3,
  }

class UserIdentityType:
  EVERNOTE_USERID = 1
  EMAIL = 2
  IDENTITYID = 3

  _VALUES_TO_NAMES = {
    1: "EVERNOTE_USERID",
    2: "EMAIL",
    3: "IDENTITYID",
  }

  _NAMES_TO_VALUES = {
    "EVERNOTE_USERID": 1,
    "EMAIL": 2,
    "IDENTITYID": 3,
  }


class Data:
  """
  Attributes:
   - bodyHash
   - size
   - body
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'bodyHash', None, None, ), # 1
    (2, TType.I32, 'size', None, None, ), # 2
    (3, TType.STRING, 'body', None, None, ), # 3
  )

  def __init__(self, bodyHash=None, size=None, body=None,):
    self.bodyHash = bodyHash
    self.size = size
    self.body = body

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.bodyHash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.body = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Data')
    if self.bodyHash is not None:
      oprot.writeFieldBegin('bodyHash', TType.STRING, 1)
      oprot.writeString(self.bodyHash)
      oprot.writeFieldEnd()
    if self.size is not None:
      oprot.writeFieldBegin('size', TType.I32, 2)
      oprot.writeI32(self.size)
      oprot.writeFieldEnd()
    if self.body is not None:
      oprot.writeFieldBegin('body', TType.STRING, 3)
      oprot.writeString(self.body)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bodyHash)
    value = (value * 31) ^ hash(self.size)
    value = (value * 31) ^ hash(self.body)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserAttributes:
  """
  Attributes:
   - defaultLocationName
   - defaultLatitude
   - defaultLongitude
   - preactivation
   - viewedPromotions
   - incomingEmailAddress
   - recentMailedAddresses
   - comments
   - dateAgreedToTermsOfService
   - maxReferrals
   - referralCount
   - refererCode
   - sentEmailDate
   - sentEmailCount
   - dailyEmailLimit
   - emailOptOutDate
   - partnerEmailOptInDate
   - preferredLanguage
   - preferredCountry
   - clipFullPage
   - twitterUserName
   - twitterId
   - groupName
   - recognitionLanguage
   - referralProof
   - educationalDiscount
   - businessAddress
   - hideSponsorBilling
   - taxExempt
   - useEmailAutoFiling
   - reminderEmailConfig
   - emailAddressLastConfirmed
   - passwordUpdated
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'defaultLocationName', None, None, ), # 1
    (2, TType.DOUBLE, 'defaultLatitude', None, None, ), # 2
    (3, TType.DOUBLE, 'defaultLongitude', None, None, ), # 3
    (4, TType.BOOL, 'preactivation', None, None, ), # 4
    (5, TType.LIST, 'viewedPromotions', (TType.STRING,None), None, ), # 5
    (6, TType.STRING, 'incomingEmailAddress', None, None, ), # 6
    (7, TType.LIST, 'recentMailedAddresses', (TType.STRING,None), None, ), # 7
    None, # 8
    (9, TType.STRING, 'comments', None, None, ), # 9
    None, # 10
    (11, TType.I64, 'dateAgreedToTermsOfService', None, None, ), # 11
    (12, TType.I32, 'maxReferrals', None, None, ), # 12
    (13, TType.I32, 'referralCount', None, None, ), # 13
    (14, TType.STRING, 'refererCode', None, None, ), # 14
    (15, TType.I64, 'sentEmailDate', None, None, ), # 15
    (16, TType.I32, 'sentEmailCount', None, None, ), # 16
    (17, TType.I32, 'dailyEmailLimit', None, None, ), # 17
    (18, TType.I64, 'emailOptOutDate', None, None, ), # 18
    (19, TType.I64, 'partnerEmailOptInDate', None, None, ), # 19
    (20, TType.STRING, 'preferredLanguage', None, None, ), # 20
    (21, TType.STRING, 'preferredCountry', None, None, ), # 21
    (22, TType.BOOL, 'clipFullPage', None, None, ), # 22
    (23, TType.STRING, 'twitterUserName', None, None, ), # 23
    (24, TType.STRING, 'twitterId', None, None, ), # 24
    (25, TType.STRING, 'groupName', None, None, ), # 25
    (26, TType.STRING, 'recognitionLanguage', None, None, ), # 26
    None, # 27
    (28, TType.STRING, 'referralProof', None, None, ), # 28
    (29, TType.BOOL, 'educationalDiscount', None, None, ), # 29
    (30, TType.STRING, 'businessAddress', None, None, ), # 30
    (31, TType.BOOL, 'hideSponsorBilling', None, None, ), # 31
    (32, TType.BOOL, 'taxExempt', None, None, ), # 32
    (33, TType.BOOL, 'useEmailAutoFiling', None, None, ), # 33
    (34, TType.I32, 'reminderEmailConfig', None, None, ), # 34
    (35, TType.I64, 'emailAddressLastConfirmed', None, None, ), # 35
    (36, TType.I64, 'passwordUpdated', None, None, ), # 36
  )

  def __init__(self, defaultLocationName=None, defaultLatitude=None, defaultLongitude=None, preactivation=None, viewedPromotions=None, incomingEmailAddress=None, recentMailedAddresses=None, comments=None, dateAgreedToTermsOfService=None, maxReferrals=None, referralCount=None, refererCode=None, sentEmailDate=None, sentEmailCount=None, dailyEmailLimit=None, emailOptOutDate=None, partnerEmailOptInDate=None, preferredLanguage=None, preferredCountry=None, clipFullPage=None, twitterUserName=None, twitterId=None, groupName=None, recognitionLanguage=None, referralProof=None, educationalDiscount=None, businessAddress=None, hideSponsorBilling=None, taxExempt=None, useEmailAutoFiling=None, reminderEmailConfig=None, emailAddressLastConfirmed=None, passwordUpdated=None,):
    self.defaultLocationName = defaultLocationName
    self.defaultLatitude = defaultLatitude
    self.defaultLongitude = defaultLongitude
    self.preactivation = preactivation
    self.viewedPromotions = viewedPromotions
    self.incomingEmailAddress = incomingEmailAddress
    self.recentMailedAddresses = recentMailedAddresses
    self.comments = comments
    self.dateAgreedToTermsOfService = dateAgreedToTermsOfService
    self.maxReferrals = maxReferrals
    self.referralCount = referralCount
    self.refererCode = refererCode
    self.sentEmailDate = sentEmailDate
    self.sentEmailCount = sentEmailCount
    self.dailyEmailLimit = dailyEmailLimit
    self.emailOptOutDate = emailOptOutDate
    self.partnerEmailOptInDate = partnerEmailOptInDate
    self.preferredLanguage = preferredLanguage
    self.preferredCountry = preferredCountry
    self.clipFullPage = clipFullPage
    self.twitterUserName = twitterUserName
    self.twitterId = twitterId
    self.groupName = groupName
    self.recognitionLanguage = recognitionLanguage
    self.referralProof = referralProof
    self.educationalDiscount = educationalDiscount
    self.businessAddress = businessAddress
    self.hideSponsorBilling = hideSponsorBilling
    self.taxExempt = taxExempt
    self.useEmailAutoFiling = useEmailAutoFiling
    self.reminderEmailConfig = reminderEmailConfig
    self.emailAddressLastConfirmed = emailAddressLastConfirmed
    self.passwordUpdated = passwordUpdated

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.defaultLocationName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.defaultLatitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.defaultLongitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.preactivation = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.viewedPromotions = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.viewedPromotions.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.incomingEmailAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.recentMailedAddresses = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString();
            self.recentMailedAddresses.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.comments = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.dateAgreedToTermsOfService = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.maxReferrals = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.referralCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.refererCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.sentEmailDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.sentEmailCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.dailyEmailLimit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          self.emailOptOutDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          self.partnerEmailOptInDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.preferredLanguage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.preferredCountry = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.BOOL:
          self.clipFullPage = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.twitterUserName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.twitterId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.groupName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.recognitionLanguage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.referralProof = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.BOOL:
          self.educationalDiscount = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.businessAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.BOOL:
          self.hideSponsorBilling = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.BOOL:
          self.taxExempt = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.BOOL:
          self.useEmailAutoFiling = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          self.reminderEmailConfig = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I64:
          self.emailAddressLastConfirmed = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I64:
          self.passwordUpdated = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserAttributes')
    if self.defaultLocationName is not None:
      oprot.writeFieldBegin('defaultLocationName', TType.STRING, 1)
      oprot.writeString(self.defaultLocationName)
      oprot.writeFieldEnd()
    if self.defaultLatitude is not None:
      oprot.writeFieldBegin('defaultLatitude', TType.DOUBLE, 2)
      oprot.writeDouble(self.defaultLatitude)
      oprot.writeFieldEnd()
    if self.defaultLongitude is not None:
      oprot.writeFieldBegin('defaultLongitude', TType.DOUBLE, 3)
      oprot.writeDouble(self.defaultLongitude)
      oprot.writeFieldEnd()
    if self.preactivation is not None:
      oprot.writeFieldBegin('preactivation', TType.BOOL, 4)
      oprot.writeBool(self.preactivation)
      oprot.writeFieldEnd()
    if self.viewedPromotions is not None:
      oprot.writeFieldBegin('viewedPromotions', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.viewedPromotions))
      for iter12 in self.viewedPromotions:
        oprot.writeString(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.incomingEmailAddress is not None:
      oprot.writeFieldBegin('incomingEmailAddress', TType.STRING, 6)
      oprot.writeString(self.incomingEmailAddress)
      oprot.writeFieldEnd()
    if self.recentMailedAddresses is not None:
      oprot.writeFieldBegin('recentMailedAddresses', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.recentMailedAddresses))
      for iter13 in self.recentMailedAddresses:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.comments is not None:
      oprot.writeFieldBegin('comments', TType.STRING, 9)
      oprot.writeString(self.comments)
      oprot.writeFieldEnd()
    if self.dateAgreedToTermsOfService is not None:
      oprot.writeFieldBegin('dateAgreedToTermsOfService', TType.I64, 11)
      oprot.writeI64(self.dateAgreedToTermsOfService)
      oprot.writeFieldEnd()
    if self.maxReferrals is not None:
      oprot.writeFieldBegin('maxReferrals', TType.I32, 12)
      oprot.writeI32(self.maxReferrals)
      oprot.writeFieldEnd()
    if self.referralCount is not None:
      oprot.writeFieldBegin('referralCount', TType.I32, 13)
      oprot.writeI32(self.referralCount)
      oprot.writeFieldEnd()
    if self.refererCode is not None:
      oprot.writeFieldBegin('refererCode', TType.STRING, 14)
      oprot.writeString(self.refererCode)
      oprot.writeFieldEnd()
    if self.sentEmailDate is not None:
      oprot.writeFieldBegin('sentEmailDate', TType.I64, 15)
      oprot.writeI64(self.sentEmailDate)
      oprot.writeFieldEnd()
    if self.sentEmailCount is not None:
      oprot.writeFieldBegin('sentEmailCount', TType.I32, 16)
      oprot.writeI32(self.sentEmailCount)
      oprot.writeFieldEnd()
    if self.dailyEmailLimit is not None:
      oprot.writeFieldBegin('dailyEmailLimit', TType.I32, 17)
      oprot.writeI32(self.dailyEmailLimit)
      oprot.writeFieldEnd()
    if self.emailOptOutDate is not None:
      oprot.writeFieldBegin('emailOptOutDate', TType.I64, 18)
      oprot.writeI64(self.emailOptOutDate)
      oprot.writeFieldEnd()
    if self.partnerEmailOptInDate is not None:
      oprot.writeFieldBegin('partnerEmailOptInDate', TType.I64, 19)
      oprot.writeI64(self.partnerEmailOptInDate)
      oprot.writeFieldEnd()
    if self.preferredLanguage is not None:
      oprot.writeFieldBegin('preferredLanguage', TType.STRING, 20)
      oprot.writeString(self.preferredLanguage)
      oprot.writeFieldEnd()
    if self.preferredCountry is not None:
      oprot.writeFieldBegin('preferredCountry', TType.STRING, 21)
      oprot.writeString(self.preferredCountry)
      oprot.writeFieldEnd()
    if self.clipFullPage is not None:
      oprot.writeFieldBegin('clipFullPage', TType.BOOL, 22)
      oprot.writeBool(self.clipFullPage)
      oprot.writeFieldEnd()
    if self.twitterUserName is not None:
      oprot.writeFieldBegin('twitterUserName', TType.STRING, 23)
      oprot.writeString(self.twitterUserName)
      oprot.writeFieldEnd()
    if self.twitterId is not None:
      oprot.writeFieldBegin('twitterId', TType.STRING, 24)
      oprot.writeString(self.twitterId)
      oprot.writeFieldEnd()
    if self.groupName is not None:
      oprot.writeFieldBegin('groupName', TType.STRING, 25)
      oprot.writeString(self.groupName)
      oprot.writeFieldEnd()
    if self.recognitionLanguage is not None:
      oprot.writeFieldBegin('recognitionLanguage', TType.STRING, 26)
      oprot.writeString(self.recognitionLanguage)
      oprot.writeFieldEnd()
    if self.referralProof is not None:
      oprot.writeFieldBegin('referralProof', TType.STRING, 28)
      oprot.writeString(self.referralProof)
      oprot.writeFieldEnd()
    if self.educationalDiscount is not None:
      oprot.writeFieldBegin('educationalDiscount', TType.BOOL, 29)
      oprot.writeBool(self.educationalDiscount)
      oprot.writeFieldEnd()
    if self.businessAddress is not None:
      oprot.writeFieldBegin('businessAddress', TType.STRING, 30)
      oprot.writeString(self.businessAddress)
      oprot.writeFieldEnd()
    if self.hideSponsorBilling is not None:
      oprot.writeFieldBegin('hideSponsorBilling', TType.BOOL, 31)
      oprot.writeBool(self.hideSponsorBilling)
      oprot.writeFieldEnd()
    if self.taxExempt is not None:
      oprot.writeFieldBegin('taxExempt', TType.BOOL, 32)
      oprot.writeBool(self.taxExempt)
      oprot.writeFieldEnd()
    if self.useEmailAutoFiling is not None:
      oprot.writeFieldBegin('useEmailAutoFiling', TType.BOOL, 33)
      oprot.writeBool(self.useEmailAutoFiling)
      oprot.writeFieldEnd()
    if self.reminderEmailConfig is not None:
      oprot.writeFieldBegin('reminderEmailConfig', TType.I32, 34)
      oprot.writeI32(self.reminderEmailConfig)
      oprot.writeFieldEnd()
    if self.emailAddressLastConfirmed is not None:
      oprot.writeFieldBegin('emailAddressLastConfirmed', TType.I64, 35)
      oprot.writeI64(self.emailAddressLastConfirmed)
      oprot.writeFieldEnd()
    if self.passwordUpdated is not None:
      oprot.writeFieldBegin('passwordUpdated', TType.I64, 36)
      oprot.writeI64(self.passwordUpdated)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.defaultLocationName)
    value = (value * 31) ^ hash(self.defaultLatitude)
    value = (value * 31) ^ hash(self.defaultLongitude)
    value = (value * 31) ^ hash(self.preactivation)
    value = (value * 31) ^ hash(self.viewedPromotions)
    value = (value * 31) ^ hash(self.incomingEmailAddress)
    value = (value * 31) ^ hash(self.recentMailedAddresses)
    value = (value * 31) ^ hash(self.comments)
    value = (value * 31) ^ hash(self.dateAgreedToTermsOfService)
    value = (value * 31) ^ hash(self.maxReferrals)
    value = (value * 31) ^ hash(self.referralCount)
    value = (value * 31) ^ hash(self.refererCode)
    value = (value * 31) ^ hash(self.sentEmailDate)
    value = (value * 31) ^ hash(self.sentEmailCount)
    value = (value * 31) ^ hash(self.dailyEmailLimit)
    value = (value * 31) ^ hash(self.emailOptOutDate)
    value = (value * 31) ^ hash(self.partnerEmailOptInDate)
    value = (value * 31) ^ hash(self.preferredLanguage)
    value = (value * 31) ^ hash(self.preferredCountry)
    value = (value * 31) ^ hash(self.clipFullPage)
    value = (value * 31) ^ hash(self.twitterUserName)
    value = (value * 31) ^ hash(self.twitterId)
    value = (value * 31) ^ hash(self.groupName)
    value = (value * 31) ^ hash(self.recognitionLanguage)
    value = (value * 31) ^ hash(self.referralProof)
    value = (value * 31) ^ hash(self.educationalDiscount)
    value = (value * 31) ^ hash(self.businessAddress)
    value = (value * 31) ^ hash(self.hideSponsorBilling)
    value = (value * 31) ^ hash(self.taxExempt)
    value = (value * 31) ^ hash(self.useEmailAutoFiling)
    value = (value * 31) ^ hash(self.reminderEmailConfig)
    value = (value * 31) ^ hash(self.emailAddressLastConfirmed)
    value = (value * 31) ^ hash(self.passwordUpdated)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BusinessUserAttributes:
  """
  Attributes:
   - title
   - location
   - department
   - mobilePhone
   - linkedInProfileUrl
   - workPhone
   - companyStartDate
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'title', None, None, ), # 1
    (2, TType.STRING, 'location', None, None, ), # 2
    (3, TType.STRING, 'department', None, None, ), # 3
    (4, TType.STRING, 'mobilePhone', None, None, ), # 4
    (5, TType.STRING, 'linkedInProfileUrl', None, None, ), # 5
    (6, TType.STRING, 'workPhone', None, None, ), # 6
    (7, TType.I64, 'companyStartDate', None, None, ), # 7
  )

  def __init__(self, title=None, location=None, department=None, mobilePhone=None, linkedInProfileUrl=None, workPhone=None, companyStartDate=None,):
    self.title = title
    self.location = location
    self.department = department
    self.mobilePhone = mobilePhone
    self.linkedInProfileUrl = linkedInProfileUrl
    self.workPhone = workPhone
    self.companyStartDate = companyStartDate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.location = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.department = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mobilePhone = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.linkedInProfileUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.workPhone = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.companyStartDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BusinessUserAttributes')
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 1)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRING, 2)
      oprot.writeString(self.location)
      oprot.writeFieldEnd()
    if self.department is not None:
      oprot.writeFieldBegin('department', TType.STRING, 3)
      oprot.writeString(self.department)
      oprot.writeFieldEnd()
    if self.mobilePhone is not None:
      oprot.writeFieldBegin('mobilePhone', TType.STRING, 4)
      oprot.writeString(self.mobilePhone)
      oprot.writeFieldEnd()
    if self.linkedInProfileUrl is not None:
      oprot.writeFieldBegin('linkedInProfileUrl', TType.STRING, 5)
      oprot.writeString(self.linkedInProfileUrl)
      oprot.writeFieldEnd()
    if self.workPhone is not None:
      oprot.writeFieldBegin('workPhone', TType.STRING, 6)
      oprot.writeString(self.workPhone)
      oprot.writeFieldEnd()
    if self.companyStartDate is not None:
      oprot.writeFieldBegin('companyStartDate', TType.I64, 7)
      oprot.writeI64(self.companyStartDate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.location)
    value = (value * 31) ^ hash(self.department)
    value = (value * 31) ^ hash(self.mobilePhone)
    value = (value * 31) ^ hash(self.linkedInProfileUrl)
    value = (value * 31) ^ hash(self.workPhone)
    value = (value * 31) ^ hash(self.companyStartDate)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BackupPaymentInfo:
  """
  Attributes:
   - premiumCommerceService
   - premiumServiceSKU
   - currency
   - unitPrice
   - paymentMethodId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'premiumCommerceService', None, None, ), # 1
    (2, TType.STRING, 'premiumServiceSKU', None, None, ), # 2
    (3, TType.STRING, 'currency', None, None, ), # 3
    (4, TType.I32, 'unitPrice', None, None, ), # 4
    (5, TType.I32, 'paymentMethodId', None, None, ), # 5
  )

  def __init__(self, premiumCommerceService=None, premiumServiceSKU=None, currency=None, unitPrice=None, paymentMethodId=None,):
    self.premiumCommerceService = premiumCommerceService
    self.premiumServiceSKU = premiumServiceSKU
    self.currency = currency
    self.unitPrice = unitPrice
    self.paymentMethodId = paymentMethodId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.premiumCommerceService = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.premiumServiceSKU = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.unitPrice = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.paymentMethodId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BackupPaymentInfo')
    if self.premiumCommerceService is not None:
      oprot.writeFieldBegin('premiumCommerceService', TType.STRING, 1)
      oprot.writeString(self.premiumCommerceService)
      oprot.writeFieldEnd()
    if self.premiumServiceSKU is not None:
      oprot.writeFieldBegin('premiumServiceSKU', TType.STRING, 2)
      oprot.writeString(self.premiumServiceSKU)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 3)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.unitPrice is not None:
      oprot.writeFieldBegin('unitPrice', TType.I32, 4)
      oprot.writeI32(self.unitPrice)
      oprot.writeFieldEnd()
    if self.paymentMethodId is not None:
      oprot.writeFieldBegin('paymentMethodId', TType.I32, 5)
      oprot.writeI32(self.paymentMethodId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.premiumCommerceService is None:
      raise TProtocol.TProtocolException(message='Required field premiumCommerceService is unset!')
    if self.premiumServiceSKU is None:
      raise TProtocol.TProtocolException(message='Required field premiumServiceSKU is unset!')
    if self.currency is None:
      raise TProtocol.TProtocolException(message='Required field currency is unset!')
    if self.unitPrice is None:
      raise TProtocol.TProtocolException(message='Required field unitPrice is unset!')
    if self.paymentMethodId is None:
      raise TProtocol.TProtocolException(message='Required field paymentMethodId is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.premiumCommerceService)
    value = (value * 31) ^ hash(self.premiumServiceSKU)
    value = (value * 31) ^ hash(self.currency)
    value = (value * 31) ^ hash(self.unitPrice)
    value = (value * 31) ^ hash(self.paymentMethodId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Accounting:
  """
  Attributes:
   - uploadLimit
   - uploadLimitEnd
   - uploadLimitNextMonth
   - premiumServiceStatus
   - premiumOrderNumber
   - premiumCommerceService
   - premiumServiceStart
   - premiumServiceSKU
   - lastSuccessfulCharge
   - lastFailedCharge
   - lastFailedChargeReason
   - nextPaymentDue
   - premiumLockUntil
   - updated
   - premiumSubscriptionNumber
   - lastRequestedCharge
   - currency
   - unitPrice
   - businessId
   - businessName
   - businessRole
   - unitDiscount
   - nextChargeDate
   - availablePoints
   - backupPaymentInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uploadLimit', None, None, ), # 1
    (2, TType.I64, 'uploadLimitEnd', None, None, ), # 2
    (3, TType.I64, 'uploadLimitNextMonth', None, None, ), # 3
    (4, TType.I32, 'premiumServiceStatus', None, None, ), # 4
    (5, TType.STRING, 'premiumOrderNumber', None, None, ), # 5
    (6, TType.STRING, 'premiumCommerceService', None, None, ), # 6
    (7, TType.I64, 'premiumServiceStart', None, None, ), # 7
    (8, TType.STRING, 'premiumServiceSKU', None, None, ), # 8
    (9, TType.I64, 'lastSuccessfulCharge', None, None, ), # 9
    (10, TType.I64, 'lastFailedCharge', None, None, ), # 10
    (11, TType.STRING, 'lastFailedChargeReason', None, None, ), # 11
    (12, TType.I64, 'nextPaymentDue', None, None, ), # 12
    (13, TType.I64, 'premiumLockUntil', None, None, ), # 13
    (14, TType.I64, 'updated', None, None, ), # 14
    None, # 15
    (16, TType.STRING, 'premiumSubscriptionNumber', None, None, ), # 16
    (17, TType.I64, 'lastRequestedCharge', None, None, ), # 17
    (18, TType.STRING, 'currency', None, None, ), # 18
    (19, TType.I32, 'unitPrice', None, None, ), # 19
    (20, TType.I32, 'businessId', None, None, ), # 20
    (21, TType.STRING, 'businessName', None, None, ), # 21
    (22, TType.I32, 'businessRole', None, None, ), # 22
    (23, TType.I32, 'unitDiscount', None, None, ), # 23
    (24, TType.I64, 'nextChargeDate', None, None, ), # 24
    (25, TType.I32, 'availablePoints', None, None, ), # 25
    (26, TType.STRUCT, 'backupPaymentInfo', (BackupPaymentInfo, BackupPaymentInfo.thrift_spec), None, ), # 26
  )

  def __init__(self, uploadLimit=None, uploadLimitEnd=None, uploadLimitNextMonth=None, premiumServiceStatus=None, premiumOrderNumber=None, premiumCommerceService=None, premiumServiceStart=None, premiumServiceSKU=None, lastSuccessfulCharge=None, lastFailedCharge=None, lastFailedChargeReason=None, nextPaymentDue=None, premiumLockUntil=None, updated=None, premiumSubscriptionNumber=None, lastRequestedCharge=None, currency=None, unitPrice=None, businessId=None, businessName=None, businessRole=None, unitDiscount=None, nextChargeDate=None, availablePoints=None, backupPaymentInfo=None,):
    self.uploadLimit = uploadLimit
    self.uploadLimitEnd = uploadLimitEnd
    self.uploadLimitNextMonth = uploadLimitNextMonth
    self.premiumServiceStatus = premiumServiceStatus
    self.premiumOrderNumber = premiumOrderNumber
    self.premiumCommerceService = premiumCommerceService
    self.premiumServiceStart = premiumServiceStart
    self.premiumServiceSKU = premiumServiceSKU
    self.lastSuccessfulCharge = lastSuccessfulCharge
    self.lastFailedCharge = lastFailedCharge
    self.lastFailedChargeReason = lastFailedChargeReason
    self.nextPaymentDue = nextPaymentDue
    self.premiumLockUntil = premiumLockUntil
    self.updated = updated
    self.premiumSubscriptionNumber = premiumSubscriptionNumber
    self.lastRequestedCharge = lastRequestedCharge
    self.currency = currency
    self.unitPrice = unitPrice
    self.businessId = businessId
    self.businessName = businessName
    self.businessRole = businessRole
    self.unitDiscount = unitDiscount
    self.nextChargeDate = nextChargeDate
    self.availablePoints = availablePoints
    self.backupPaymentInfo = backupPaymentInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uploadLimit = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.uploadLimitEnd = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.uploadLimitNextMonth = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.premiumServiceStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.premiumOrderNumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.premiumCommerceService = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.premiumServiceStart = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.premiumServiceSKU = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.lastSuccessfulCharge = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.lastFailedCharge = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.lastFailedChargeReason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.nextPaymentDue = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.premiumLockUntil = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.updated = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.premiumSubscriptionNumber = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I64:
          self.lastRequestedCharge = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.unitPrice = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.businessId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.businessName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.businessRole = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.unitDiscount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I64:
          self.nextChargeDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.availablePoints = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRUCT:
          self.backupPaymentInfo = BackupPaymentInfo()
          self.backupPaymentInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Accounting')
    if self.uploadLimit is not None:
      oprot.writeFieldBegin('uploadLimit', TType.I64, 1)
      oprot.writeI64(self.uploadLimit)
      oprot.writeFieldEnd()
    if self.uploadLimitEnd is not None:
      oprot.writeFieldBegin('uploadLimitEnd', TType.I64, 2)
      oprot.writeI64(self.uploadLimitEnd)
      oprot.writeFieldEnd()
    if self.uploadLimitNextMonth is not None:
      oprot.writeFieldBegin('uploadLimitNextMonth', TType.I64, 3)
      oprot.writeI64(self.uploadLimitNextMonth)
      oprot.writeFieldEnd()
    if self.premiumServiceStatus is not None:
      oprot.writeFieldBegin('premiumServiceStatus', TType.I32, 4)
      oprot.writeI32(self.premiumServiceStatus)
      oprot.writeFieldEnd()
    if self.premiumOrderNumber is not None:
      oprot.writeFieldBegin('premiumOrderNumber', TType.STRING, 5)
      oprot.writeString(self.premiumOrderNumber)
      oprot.writeFieldEnd()
    if self.premiumCommerceService is not None:
      oprot.writeFieldBegin('premiumCommerceService', TType.STRING, 6)
      oprot.writeString(self.premiumCommerceService)
      oprot.writeFieldEnd()
    if self.premiumServiceStart is not None:
      oprot.writeFieldBegin('premiumServiceStart', TType.I64, 7)
      oprot.writeI64(self.premiumServiceStart)
      oprot.writeFieldEnd()
    if self.premiumServiceSKU is not None:
      oprot.writeFieldBegin('premiumServiceSKU', TType.STRING, 8)
      oprot.writeString(self.premiumServiceSKU)
      oprot.writeFieldEnd()
    if self.lastSuccessfulCharge is not None:
      oprot.writeFieldBegin('lastSuccessfulCharge', TType.I64, 9)
      oprot.writeI64(self.lastSuccessfulCharge)
      oprot.writeFieldEnd()
    if self.lastFailedCharge is not None:
      oprot.writeFieldBegin('lastFailedCharge', TType.I64, 10)
      oprot.writeI64(self.lastFailedCharge)
      oprot.writeFieldEnd()
    if self.lastFailedChargeReason is not None:
      oprot.writeFieldBegin('lastFailedChargeReason', TType.STRING, 11)
      oprot.writeString(self.lastFailedChargeReason)
      oprot.writeFieldEnd()
    if self.nextPaymentDue is not None:
      oprot.writeFieldBegin('nextPaymentDue', TType.I64, 12)
      oprot.writeI64(self.nextPaymentDue)
      oprot.writeFieldEnd()
    if self.premiumLockUntil is not None:
      oprot.writeFieldBegin('premiumLockUntil', TType.I64, 13)
      oprot.writeI64(self.premiumLockUntil)
      oprot.writeFieldEnd()
    if self.updated is not None:
      oprot.writeFieldBegin('updated', TType.I64, 14)
      oprot.writeI64(self.updated)
      oprot.writeFieldEnd()
    if self.premiumSubscriptionNumber is not None:
      oprot.writeFieldBegin('premiumSubscriptionNumber', TType.STRING, 16)
      oprot.writeString(self.premiumSubscriptionNumber)
      oprot.writeFieldEnd()
    if self.lastRequestedCharge is not None:
      oprot.writeFieldBegin('lastRequestedCharge', TType.I64, 17)
      oprot.writeI64(self.lastRequestedCharge)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 18)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.unitPrice is not None:
      oprot.writeFieldBegin('unitPrice', TType.I32, 19)
      oprot.writeI32(self.unitPrice)
      oprot.writeFieldEnd()
    if self.businessId is not None:
      oprot.writeFieldBegin('businessId', TType.I32, 20)
      oprot.writeI32(self.businessId)
      oprot.writeFieldEnd()
    if self.businessName is not None:
      oprot.writeFieldBegin('businessName', TType.STRING, 21)
      oprot.writeString(self.businessName)
      oprot.writeFieldEnd()
    if self.businessRole is not None:
      oprot.writeFieldBegin('businessRole', TType.I32, 22)
      oprot.writeI32(self.businessRole)
      oprot.writeFieldEnd()
    if self.unitDiscount is not None:
      oprot.writeFieldBegin('unitDiscount', TType.I32, 23)
      oprot.writeI32(self.unitDiscount)
      oprot.writeFieldEnd()
    if self.nextChargeDate is not None:
      oprot.writeFieldBegin('nextChargeDate', TType.I64, 24)
      oprot.writeI64(self.nextChargeDate)
      oprot.writeFieldEnd()
    if self.availablePoints is not None:
      oprot.writeFieldBegin('availablePoints', TType.I32, 25)
      oprot.writeI32(self.availablePoints)
      oprot.writeFieldEnd()
    if self.backupPaymentInfo is not None:
      oprot.writeFieldBegin('backupPaymentInfo', TType.STRUCT, 26)
      self.backupPaymentInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uploadLimit)
    value = (value * 31) ^ hash(self.uploadLimitEnd)
    value = (value * 31) ^ hash(self.uploadLimitNextMonth)
    value = (value * 31) ^ hash(self.premiumServiceStatus)
    value = (value * 31) ^ hash(self.premiumOrderNumber)
    value = (value * 31) ^ hash(self.premiumCommerceService)
    value = (value * 31) ^ hash(self.premiumServiceStart)
    value = (value * 31) ^ hash(self.premiumServiceSKU)
    value = (value * 31) ^ hash(self.lastSuccessfulCharge)
    value = (value * 31) ^ hash(self.lastFailedCharge)
    value = (value * 31) ^ hash(self.lastFailedChargeReason)
    value = (value * 31) ^ hash(self.nextPaymentDue)
    value = (value * 31) ^ hash(self.premiumLockUntil)
    value = (value * 31) ^ hash(self.updated)
    value = (value * 31) ^ hash(self.premiumSubscriptionNumber)
    value = (value * 31) ^ hash(self.lastRequestedCharge)
    value = (value * 31) ^ hash(self.currency)
    value = (value * 31) ^ hash(self.unitPrice)
    value = (value * 31) ^ hash(self.businessId)
    value = (value * 31) ^ hash(self.businessName)
    value = (value * 31) ^ hash(self.businessRole)
    value = (value * 31) ^ hash(self.unitDiscount)
    value = (value * 31) ^ hash(self.nextChargeDate)
    value = (value * 31) ^ hash(self.availablePoints)
    value = (value * 31) ^ hash(self.backupPaymentInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BusinessUserInfo:
  """
  Attributes:
   - businessId
   - businessName
   - role
   - email
   - updated
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'businessId', None, None, ), # 1
    (2, TType.STRING, 'businessName', None, None, ), # 2
    (3, TType.I32, 'role', None, None, ), # 3
    (4, TType.STRING, 'email', None, None, ), # 4
    (5, TType.I64, 'updated', None, None, ), # 5
  )

  def __init__(self, businessId=None, businessName=None, role=None, email=None, updated=None,):
    self.businessId = businessId
    self.businessName = businessName
    self.role = role
    self.email = email
    self.updated = updated

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.businessId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.businessName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.role = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.updated = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BusinessUserInfo')
    if self.businessId is not None:
      oprot.writeFieldBegin('businessId', TType.I32, 1)
      oprot.writeI32(self.businessId)
      oprot.writeFieldEnd()
    if self.businessName is not None:
      oprot.writeFieldBegin('businessName', TType.STRING, 2)
      oprot.writeString(self.businessName)
      oprot.writeFieldEnd()
    if self.role is not None:
      oprot.writeFieldBegin('role', TType.I32, 3)
      oprot.writeI32(self.role)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 4)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.updated is not None:
      oprot.writeFieldBegin('updated', TType.I64, 5)
      oprot.writeI64(self.updated)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.businessId)
    value = (value * 31) ^ hash(self.businessName)
    value = (value * 31) ^ hash(self.role)
    value = (value * 31) ^ hash(self.email)
    value = (value * 31) ^ hash(self.updated)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountLimits:
  """
  Attributes:
   - userMailLimitDaily
   - noteSizeMax
   - resourceSizeMax
   - userLinkedNotebookMax
   - uploadLimit
   - userNoteCountMax
   - userNotebookCountMax
   - userTagCountMax
   - noteTagCountMax
   - userSavedSearchesMax
   - noteResourceCountMax
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userMailLimitDaily', None, None, ), # 1
    (2, TType.I64, 'noteSizeMax', None, None, ), # 2
    (3, TType.I64, 'resourceSizeMax', None, None, ), # 3
    (4, TType.I32, 'userLinkedNotebookMax', None, None, ), # 4
    (5, TType.I64, 'uploadLimit', None, None, ), # 5
    (6, TType.I32, 'userNoteCountMax', None, None, ), # 6
    (7, TType.I32, 'userNotebookCountMax', None, None, ), # 7
    (8, TType.I32, 'userTagCountMax', None, None, ), # 8
    (9, TType.I32, 'noteTagCountMax', None, None, ), # 9
    (10, TType.I32, 'userSavedSearchesMax', None, None, ), # 10
    (11, TType.I32, 'noteResourceCountMax', None, None, ), # 11
  )

  def __init__(self, userMailLimitDaily=None, noteSizeMax=None, resourceSizeMax=None, userLinkedNotebookMax=None, uploadLimit=None, userNoteCountMax=None, userNotebookCountMax=None, userTagCountMax=None, noteTagCountMax=None, userSavedSearchesMax=None, noteResourceCountMax=None,):
    self.userMailLimitDaily = userMailLimitDaily
    self.noteSizeMax = noteSizeMax
    self.resourceSizeMax = resourceSizeMax
    self.userLinkedNotebookMax = userLinkedNotebookMax
    self.uploadLimit = uploadLimit
    self.userNoteCountMax = userNoteCountMax
    self.userNotebookCountMax = userNotebookCountMax
    self.userTagCountMax = userTagCountMax
    self.noteTagCountMax = noteTagCountMax
    self.userSavedSearchesMax = userSavedSearchesMax
    self.noteResourceCountMax = noteResourceCountMax

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userMailLimitDaily = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.noteSizeMax = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.resourceSizeMax = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.userLinkedNotebookMax = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.uploadLimit = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.userNoteCountMax = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.userNotebookCountMax = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.userTagCountMax = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.noteTagCountMax = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.userSavedSearchesMax = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.noteResourceCountMax = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountLimits')
    if self.userMailLimitDaily is not None:
      oprot.writeFieldBegin('userMailLimitDaily', TType.I32, 1)
      oprot.writeI32(self.userMailLimitDaily)
      oprot.writeFieldEnd()
    if self.noteSizeMax is not None:
      oprot.writeFieldBegin('noteSizeMax', TType.I64, 2)
      oprot.writeI64(self.noteSizeMax)
      oprot.writeFieldEnd()
    if self.resourceSizeMax is not None:
      oprot.writeFieldBegin('resourceSizeMax', TType.I64, 3)
      oprot.writeI64(self.resourceSizeMax)
      oprot.writeFieldEnd()
    if self.userLinkedNotebookMax is not None:
      oprot.writeFieldBegin('userLinkedNotebookMax', TType.I32, 4)
      oprot.writeI32(self.userLinkedNotebookMax)
      oprot.writeFieldEnd()
    if self.uploadLimit is not None:
      oprot.writeFieldBegin('uploadLimit', TType.I64, 5)
      oprot.writeI64(self.uploadLimit)
      oprot.writeFieldEnd()
    if self.userNoteCountMax is not None:
      oprot.writeFieldBegin('userNoteCountMax', TType.I32, 6)
      oprot.writeI32(self.userNoteCountMax)
      oprot.writeFieldEnd()
    if self.userNotebookCountMax is not None:
      oprot.writeFieldBegin('userNotebookCountMax', TType.I32, 7)
      oprot.writeI32(self.userNotebookCountMax)
      oprot.writeFieldEnd()
    if self.userTagCountMax is not None:
      oprot.writeFieldBegin('userTagCountMax', TType.I32, 8)
      oprot.writeI32(self.userTagCountMax)
      oprot.writeFieldEnd()
    if self.noteTagCountMax is not None:
      oprot.writeFieldBegin('noteTagCountMax', TType.I32, 9)
      oprot.writeI32(self.noteTagCountMax)
      oprot.writeFieldEnd()
    if self.userSavedSearchesMax is not None:
      oprot.writeFieldBegin('userSavedSearchesMax', TType.I32, 10)
      oprot.writeI32(self.userSavedSearchesMax)
      oprot.writeFieldEnd()
    if self.noteResourceCountMax is not None:
      oprot.writeFieldBegin('noteResourceCountMax', TType.I32, 11)
      oprot.writeI32(self.noteResourceCountMax)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userMailLimitDaily)
    value = (value * 31) ^ hash(self.noteSizeMax)
    value = (value * 31) ^ hash(self.resourceSizeMax)
    value = (value * 31) ^ hash(self.userLinkedNotebookMax)
    value = (value * 31) ^ hash(self.uploadLimit)
    value = (value * 31) ^ hash(self.userNoteCountMax)
    value = (value * 31) ^ hash(self.userNotebookCountMax)
    value = (value * 31) ^ hash(self.userTagCountMax)
    value = (value * 31) ^ hash(self.noteTagCountMax)
    value = (value * 31) ^ hash(self.userSavedSearchesMax)
    value = (value * 31) ^ hash(self.noteResourceCountMax)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PremiumInfo:
  """
  Attributes:
   - currentTime
   - premium
   - premiumRecurring
   - premiumExpirationDate
   - premiumExtendable
   - premiumPending
   - premiumCancellationPending
   - canPurchaseUploadAllowance
   - sponsoredGroupName
   - sponsoredGroupRole
   - premiumUpgradable
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'currentTime', None, None, ), # 1
    (2, TType.BOOL, 'premium', None, None, ), # 2
    (3, TType.BOOL, 'premiumRecurring', None, None, ), # 3
    (4, TType.I64, 'premiumExpirationDate', None, None, ), # 4
    (5, TType.BOOL, 'premiumExtendable', None, None, ), # 5
    (6, TType.BOOL, 'premiumPending', None, None, ), # 6
    (7, TType.BOOL, 'premiumCancellationPending', None, None, ), # 7
    (8, TType.BOOL, 'canPurchaseUploadAllowance', None, None, ), # 8
    (9, TType.STRING, 'sponsoredGroupName', None, None, ), # 9
    (10, TType.I32, 'sponsoredGroupRole', None, None, ), # 10
    (11, TType.BOOL, 'premiumUpgradable', None, None, ), # 11
  )

  def __init__(self, currentTime=None, premium=None, premiumRecurring=None, premiumExpirationDate=None, premiumExtendable=None, premiumPending=None, premiumCancellationPending=None, canPurchaseUploadAllowance=None, sponsoredGroupName=None, sponsoredGroupRole=None, premiumUpgradable=None,):
    self.currentTime = currentTime
    self.premium = premium
    self.premiumRecurring = premiumRecurring
    self.premiumExpirationDate = premiumExpirationDate
    self.premiumExtendable = premiumExtendable
    self.premiumPending = premiumPending
    self.premiumCancellationPending = premiumCancellationPending
    self.canPurchaseUploadAllowance = canPurchaseUploadAllowance
    self.sponsoredGroupName = sponsoredGroupName
    self.sponsoredGroupRole = sponsoredGroupRole
    self.premiumUpgradable = premiumUpgradable

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.currentTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.premium = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.premiumRecurring = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.premiumExpirationDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.premiumExtendable = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.premiumPending = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.premiumCancellationPending = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.canPurchaseUploadAllowance = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.sponsoredGroupName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.sponsoredGroupRole = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.premiumUpgradable = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PremiumInfo')
    if self.currentTime is not None:
      oprot.writeFieldBegin('currentTime', TType.I64, 1)
      oprot.writeI64(self.currentTime)
      oprot.writeFieldEnd()
    if self.premium is not None:
      oprot.writeFieldBegin('premium', TType.BOOL, 2)
      oprot.writeBool(self.premium)
      oprot.writeFieldEnd()
    if self.premiumRecurring is not None:
      oprot.writeFieldBegin('premiumRecurring', TType.BOOL, 3)
      oprot.writeBool(self.premiumRecurring)
      oprot.writeFieldEnd()
    if self.premiumExpirationDate is not None:
      oprot.writeFieldBegin('premiumExpirationDate', TType.I64, 4)
      oprot.writeI64(self.premiumExpirationDate)
      oprot.writeFieldEnd()
    if self.premiumExtendable is not None:
      oprot.writeFieldBegin('premiumExtendable', TType.BOOL, 5)
      oprot.writeBool(self.premiumExtendable)
      oprot.writeFieldEnd()
    if self.premiumPending is not None:
      oprot.writeFieldBegin('premiumPending', TType.BOOL, 6)
      oprot.writeBool(self.premiumPending)
      oprot.writeFieldEnd()
    if self.premiumCancellationPending is not None:
      oprot.writeFieldBegin('premiumCancellationPending', TType.BOOL, 7)
      oprot.writeBool(self.premiumCancellationPending)
      oprot.writeFieldEnd()
    if self.canPurchaseUploadAllowance is not None:
      oprot.writeFieldBegin('canPurchaseUploadAllowance', TType.BOOL, 8)
      oprot.writeBool(self.canPurchaseUploadAllowance)
      oprot.writeFieldEnd()
    if self.sponsoredGroupName is not None:
      oprot.writeFieldBegin('sponsoredGroupName', TType.STRING, 9)
      oprot.writeString(self.sponsoredGroupName)
      oprot.writeFieldEnd()
    if self.sponsoredGroupRole is not None:
      oprot.writeFieldBegin('sponsoredGroupRole', TType.I32, 10)
      oprot.writeI32(self.sponsoredGroupRole)
      oprot.writeFieldEnd()
    if self.premiumUpgradable is not None:
      oprot.writeFieldBegin('premiumUpgradable', TType.BOOL, 11)
      oprot.writeBool(self.premiumUpgradable)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.currentTime is None:
      raise TProtocol.TProtocolException(message='Required field currentTime is unset!')
    if self.premium is None:
      raise TProtocol.TProtocolException(message='Required field premium is unset!')
    if self.premiumRecurring is None:
      raise TProtocol.TProtocolException(message='Required field premiumRecurring is unset!')
    if self.premiumExtendable is None:
      raise TProtocol.TProtocolException(message='Required field premiumExtendable is unset!')
    if self.premiumPending is None:
      raise TProtocol.TProtocolException(message='Required field premiumPending is unset!')
    if self.premiumCancellationPending is None:
      raise TProtocol.TProtocolException(message='Required field premiumCancellationPending is unset!')
    if self.canPurchaseUploadAllowance is None:
      raise TProtocol.TProtocolException(message='Required field canPurchaseUploadAllowance is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.currentTime)
    value = (value * 31) ^ hash(self.premium)
    value = (value * 31) ^ hash(self.premiumRecurring)
    value = (value * 31) ^ hash(self.premiumExpirationDate)
    value = (value * 31) ^ hash(self.premiumExtendable)
    value = (value * 31) ^ hash(self.premiumPending)
    value = (value * 31) ^ hash(self.premiumCancellationPending)
    value = (value * 31) ^ hash(self.canPurchaseUploadAllowance)
    value = (value * 31) ^ hash(self.sponsoredGroupName)
    value = (value * 31) ^ hash(self.sponsoredGroupRole)
    value = (value * 31) ^ hash(self.premiumUpgradable)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubscriptionInfo:
  """
  Attributes:
   - currentTime
   - currentlySubscribed
   - subscriptionRecurring
   - subscriptionExpirationDate
   - subscriptionPending
   - subscriptionCancellationPending
   - serviceLevelsEligibleForPurchase
   - currentSku
   - validUntil
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'currentTime', None, None, ), # 1
    (2, TType.BOOL, 'currentlySubscribed', None, None, ), # 2
    (3, TType.BOOL, 'subscriptionRecurring', None, None, ), # 3
    (4, TType.I64, 'subscriptionExpirationDate', None, None, ), # 4
    (5, TType.BOOL, 'subscriptionPending', None, None, ), # 5
    (6, TType.BOOL, 'subscriptionCancellationPending', None, None, ), # 6
    (7, TType.SET, 'serviceLevelsEligibleForPurchase', (TType.I32,None), None, ), # 7
    (8, TType.STRING, 'currentSku', None, None, ), # 8
    (9, TType.I64, 'validUntil', None, None, ), # 9
  )

  def __init__(self, currentTime=None, currentlySubscribed=None, subscriptionRecurring=None, subscriptionExpirationDate=None, subscriptionPending=None, subscriptionCancellationPending=None, serviceLevelsEligibleForPurchase=None, currentSku=None, validUntil=None,):
    self.currentTime = currentTime
    self.currentlySubscribed = currentlySubscribed
    self.subscriptionRecurring = subscriptionRecurring
    self.subscriptionExpirationDate = subscriptionExpirationDate
    self.subscriptionPending = subscriptionPending
    self.subscriptionCancellationPending = subscriptionCancellationPending
    self.serviceLevelsEligibleForPurchase = serviceLevelsEligibleForPurchase
    self.currentSku = currentSku
    self.validUntil = validUntil

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.currentTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.currentlySubscribed = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.subscriptionRecurring = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.subscriptionExpirationDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.subscriptionPending = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.subscriptionCancellationPending = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.SET:
          self.serviceLevelsEligibleForPurchase = set()
          (_etype17, _size14) = iprot.readSetBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI32();
            self.serviceLevelsEligibleForPurchase.add(_elem19)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.currentSku = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.validUntil = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubscriptionInfo')
    if self.currentTime is not None:
      oprot.writeFieldBegin('currentTime', TType.I64, 1)
      oprot.writeI64(self.currentTime)
      oprot.writeFieldEnd()
    if self.currentlySubscribed is not None:
      oprot.writeFieldBegin('currentlySubscribed', TType.BOOL, 2)
      oprot.writeBool(self.currentlySubscribed)
      oprot.writeFieldEnd()
    if self.subscriptionRecurring is not None:
      oprot.writeFieldBegin('subscriptionRecurring', TType.BOOL, 3)
      oprot.writeBool(self.subscriptionRecurring)
      oprot.writeFieldEnd()
    if self.subscriptionExpirationDate is not None:
      oprot.writeFieldBegin('subscriptionExpirationDate', TType.I64, 4)
      oprot.writeI64(self.subscriptionExpirationDate)
      oprot.writeFieldEnd()
    if self.subscriptionPending is not None:
      oprot.writeFieldBegin('subscriptionPending', TType.BOOL, 5)
      oprot.writeBool(self.subscriptionPending)
      oprot.writeFieldEnd()
    if self.subscriptionCancellationPending is not None:
      oprot.writeFieldBegin('subscriptionCancellationPending', TType.BOOL, 6)
      oprot.writeBool(self.subscriptionCancellationPending)
      oprot.writeFieldEnd()
    if self.serviceLevelsEligibleForPurchase is not None:
      oprot.writeFieldBegin('serviceLevelsEligibleForPurchase', TType.SET, 7)
      oprot.writeSetBegin(TType.I32, len(self.serviceLevelsEligibleForPurchase))
      for iter20 in self.serviceLevelsEligibleForPurchase:
        oprot.writeI32(iter20)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.currentSku is not None:
      oprot.writeFieldBegin('currentSku', TType.STRING, 8)
      oprot.writeString(self.currentSku)
      oprot.writeFieldEnd()
    if self.validUntil is not None:
      oprot.writeFieldBegin('validUntil', TType.I64, 9)
      oprot.writeI64(self.validUntil)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.currentTime is None:
      raise TProtocol.TProtocolException(message='Required field currentTime is unset!')
    if self.currentlySubscribed is None:
      raise TProtocol.TProtocolException(message='Required field currentlySubscribed is unset!')
    if self.subscriptionRecurring is None:
      raise TProtocol.TProtocolException(message='Required field subscriptionRecurring is unset!')
    if self.subscriptionPending is None:
      raise TProtocol.TProtocolException(message='Required field subscriptionPending is unset!')
    if self.subscriptionCancellationPending is None:
      raise TProtocol.TProtocolException(message='Required field subscriptionCancellationPending is unset!')
    if self.serviceLevelsEligibleForPurchase is None:
      raise TProtocol.TProtocolException(message='Required field serviceLevelsEligibleForPurchase is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.currentTime)
    value = (value * 31) ^ hash(self.currentlySubscribed)
    value = (value * 31) ^ hash(self.subscriptionRecurring)
    value = (value * 31) ^ hash(self.subscriptionExpirationDate)
    value = (value * 31) ^ hash(self.subscriptionPending)
    value = (value * 31) ^ hash(self.subscriptionCancellationPending)
    value = (value * 31) ^ hash(self.serviceLevelsEligibleForPurchase)
    value = (value * 31) ^ hash(self.currentSku)
    value = (value * 31) ^ hash(self.validUntil)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class User:
  """
  Attributes:
   - id
   - username
   - email
   - name
   - timezone
   - privilege
   - serviceLevel
   - created
   - updated
   - deleted
   - active
   - shardId
   - attributes
   - accounting
   - premiumInfo
   - businessUserInfo
   - photoUrl
   - photoLastUpdated
   - accountLimits
   - subscriptionInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'username', None, None, ), # 2
    (3, TType.STRING, 'email', None, None, ), # 3
    (4, TType.STRING, 'name', None, None, ), # 4
    None, # 5
    (6, TType.STRING, 'timezone', None, None, ), # 6
    (7, TType.I32, 'privilege', None, None, ), # 7
    None, # 8
    (9, TType.I64, 'created', None, None, ), # 9
    (10, TType.I64, 'updated', None, None, ), # 10
    (11, TType.I64, 'deleted', None, None, ), # 11
    None, # 12
    (13, TType.BOOL, 'active', None, None, ), # 13
    (14, TType.STRING, 'shardId', None, None, ), # 14
    (15, TType.STRUCT, 'attributes', (UserAttributes, UserAttributes.thrift_spec), None, ), # 15
    (16, TType.STRUCT, 'accounting', (Accounting, Accounting.thrift_spec), None, ), # 16
    (17, TType.STRUCT, 'premiumInfo', (PremiumInfo, PremiumInfo.thrift_spec), None, ), # 17
    (18, TType.STRUCT, 'businessUserInfo', (BusinessUserInfo, BusinessUserInfo.thrift_spec), None, ), # 18
    (19, TType.STRING, 'photoUrl', None, None, ), # 19
    (20, TType.I64, 'photoLastUpdated', None, None, ), # 20
    (21, TType.I32, 'serviceLevel', None, None, ), # 21
    (22, TType.STRUCT, 'accountLimits', (AccountLimits, AccountLimits.thrift_spec), None, ), # 22
    (23, TType.STRUCT, 'subscriptionInfo', (SubscriptionInfo, SubscriptionInfo.thrift_spec), None, ), # 23
  )

  def __init__(self, id=None, username=None, email=None, name=None, timezone=None, privilege=None, serviceLevel=None, created=None, updated=None, deleted=None, active=None, shardId=None, attributes=None, accounting=None, premiumInfo=None, businessUserInfo=None, photoUrl=None, photoLastUpdated=None, accountLimits=None, subscriptionInfo=None,):
    self.id = id
    self.username = username
    self.email = email
    self.name = name
    self.timezone = timezone
    self.privilege = privilege
    self.serviceLevel = serviceLevel
    self.created = created
    self.updated = updated
    self.deleted = deleted
    self.active = active
    self.shardId = shardId
    self.attributes = attributes
    self.accounting = accounting
    self.premiumInfo = premiumInfo
    self.businessUserInfo = businessUserInfo
    self.photoUrl = photoUrl
    self.photoLastUpdated = photoLastUpdated
    self.accountLimits = accountLimits
    self.subscriptionInfo = subscriptionInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.timezone = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.privilege = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.serviceLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.created = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.updated = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.deleted = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BOOL:
          self.active = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.shardId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRUCT:
          self.attributes = UserAttributes()
          self.attributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRUCT:
          self.accounting = Accounting()
          self.accounting.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRUCT:
          self.premiumInfo = PremiumInfo()
          self.premiumInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRUCT:
          self.businessUserInfo = BusinessUserInfo()
          self.businessUserInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.photoUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.photoLastUpdated = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRUCT:
          self.accountLimits = AccountLimits()
          self.accountLimits.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRUCT:
          self.subscriptionInfo = SubscriptionInfo()
          self.subscriptionInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('User')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 2)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 3)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.timezone is not None:
      oprot.writeFieldBegin('timezone', TType.STRING, 6)
      oprot.writeString(self.timezone)
      oprot.writeFieldEnd()
    if self.privilege is not None:
      oprot.writeFieldBegin('privilege', TType.I32, 7)
      oprot.writeI32(self.privilege)
      oprot.writeFieldEnd()
    if self.created is not None:
      oprot.writeFieldBegin('created', TType.I64, 9)
      oprot.writeI64(self.created)
      oprot.writeFieldEnd()
    if self.updated is not None:
      oprot.writeFieldBegin('updated', TType.I64, 10)
      oprot.writeI64(self.updated)
      oprot.writeFieldEnd()
    if self.deleted is not None:
      oprot.writeFieldBegin('deleted', TType.I64, 11)
      oprot.writeI64(self.deleted)
      oprot.writeFieldEnd()
    if self.active is not None:
      oprot.writeFieldBegin('active', TType.BOOL, 13)
      oprot.writeBool(self.active)
      oprot.writeFieldEnd()
    if self.shardId is not None:
      oprot.writeFieldBegin('shardId', TType.STRING, 14)
      oprot.writeString(self.shardId)
      oprot.writeFieldEnd()
    if self.attributes is not None:
      oprot.writeFieldBegin('attributes', TType.STRUCT, 15)
      self.attributes.write(oprot)
      oprot.writeFieldEnd()
    if self.accounting is not None:
      oprot.writeFieldBegin('accounting', TType.STRUCT, 16)
      self.accounting.write(oprot)
      oprot.writeFieldEnd()
    if self.premiumInfo is not None:
      oprot.writeFieldBegin('premiumInfo', TType.STRUCT, 17)
      self.premiumInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.businessUserInfo is not None:
      oprot.writeFieldBegin('businessUserInfo', TType.STRUCT, 18)
      self.businessUserInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.photoUrl is not None:
      oprot.writeFieldBegin('photoUrl', TType.STRING, 19)
      oprot.writeString(self.photoUrl)
      oprot.writeFieldEnd()
    if self.photoLastUpdated is not None:
      oprot.writeFieldBegin('photoLastUpdated', TType.I64, 20)
      oprot.writeI64(self.photoLastUpdated)
      oprot.writeFieldEnd()
    if self.serviceLevel is not None:
      oprot.writeFieldBegin('serviceLevel', TType.I32, 21)
      oprot.writeI32(self.serviceLevel)
      oprot.writeFieldEnd()
    if self.accountLimits is not None:
      oprot.writeFieldBegin('accountLimits', TType.STRUCT, 22)
      self.accountLimits.write(oprot)
      oprot.writeFieldEnd()
    if self.subscriptionInfo is not None:
      oprot.writeFieldBegin('subscriptionInfo', TType.STRUCT, 23)
      self.subscriptionInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.username)
    value = (value * 31) ^ hash(self.email)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.timezone)
    value = (value * 31) ^ hash(self.privilege)
    value = (value * 31) ^ hash(self.serviceLevel)
    value = (value * 31) ^ hash(self.created)
    value = (value * 31) ^ hash(self.updated)
    value = (value * 31) ^ hash(self.deleted)
    value = (value * 31) ^ hash(self.active)
    value = (value * 31) ^ hash(self.shardId)
    value = (value * 31) ^ hash(self.attributes)
    value = (value * 31) ^ hash(self.accounting)
    value = (value * 31) ^ hash(self.premiumInfo)
    value = (value * 31) ^ hash(self.businessUserInfo)
    value = (value * 31) ^ hash(self.photoUrl)
    value = (value * 31) ^ hash(self.photoLastUpdated)
    value = (value * 31) ^ hash(self.accountLimits)
    value = (value * 31) ^ hash(self.subscriptionInfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Contact:
  """
  Attributes:
   - name
   - id
   - type
   - photoUrl
   - photoLastUpdated
   - messagingPermit
   - messagingPermitExpires
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'id', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
    (4, TType.STRING, 'photoUrl', None, None, ), # 4
    (5, TType.I64, 'photoLastUpdated', None, None, ), # 5
    (6, TType.STRING, 'messagingPermit', None, None, ), # 6
    (7, TType.I64, 'messagingPermitExpires', None, None, ), # 7
  )

  def __init__(self, name=None, id=None, type=None, photoUrl=None, photoLastUpdated=None, messagingPermit=None, messagingPermitExpires=None,):
    self.name = name
    self.id = id
    self.type = type
    self.photoUrl = photoUrl
    self.photoLastUpdated = photoLastUpdated
    self.messagingPermit = messagingPermit
    self.messagingPermitExpires = messagingPermitExpires

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.photoUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.photoLastUpdated = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.messagingPermit = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.messagingPermitExpires = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Contact')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 2)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.photoUrl is not None:
      oprot.writeFieldBegin('photoUrl', TType.STRING, 4)
      oprot.writeString(self.photoUrl)
      oprot.writeFieldEnd()
    if self.photoLastUpdated is not None:
      oprot.writeFieldBegin('photoLastUpdated', TType.I64, 5)
      oprot.writeI64(self.photoLastUpdated)
      oprot.writeFieldEnd()
    if self.messagingPermit is not None:
      oprot.writeFieldBegin('messagingPermit', TType.STRING, 6)
      oprot.writeString(self.messagingPermit)
      oprot.writeFieldEnd()
    if self.messagingPermitExpires is not None:
      oprot.writeFieldBegin('messagingPermitExpires', TType.I64, 7)
      oprot.writeI64(self.messagingPermitExpires)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.photoUrl)
    value = (value * 31) ^ hash(self.photoLastUpdated)
    value = (value * 31) ^ hash(self.messagingPermit)
    value = (value * 31) ^ hash(self.messagingPermitExpires)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Identity:
  """
  Attributes:
   - id
   - contact
   - userId
   - deactivated
   - sameBusiness
   - blocked
   - userConnected
   - eventId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRUCT, 'contact', (Contact, Contact.thrift_spec), None, ), # 2
    (3, TType.I32, 'userId', None, None, ), # 3
    (4, TType.BOOL, 'deactivated', None, None, ), # 4
    (5, TType.BOOL, 'sameBusiness', None, None, ), # 5
    (6, TType.BOOL, 'blocked', None, None, ), # 6
    (7, TType.BOOL, 'userConnected', None, None, ), # 7
    (8, TType.I64, 'eventId', None, None, ), # 8
  )

  def __init__(self, id=None, contact=None, userId=None, deactivated=None, sameBusiness=None, blocked=None, userConnected=None, eventId=None,):
    self.id = id
    self.contact = contact
    self.userId = userId
    self.deactivated = deactivated
    self.sameBusiness = sameBusiness
    self.blocked = blocked
    self.userConnected = userConnected
    self.eventId = eventId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.contact = Contact()
          self.contact.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.userId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.deactivated = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.sameBusiness = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.blocked = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.userConnected = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.eventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Identity')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.contact is not None:
      oprot.writeFieldBegin('contact', TType.STRUCT, 2)
      self.contact.write(oprot)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I32, 3)
      oprot.writeI32(self.userId)
      oprot.writeFieldEnd()
    if self.deactivated is not None:
      oprot.writeFieldBegin('deactivated', TType.BOOL, 4)
      oprot.writeBool(self.deactivated)
      oprot.writeFieldEnd()
    if self.sameBusiness is not None:
      oprot.writeFieldBegin('sameBusiness', TType.BOOL, 5)
      oprot.writeBool(self.sameBusiness)
      oprot.writeFieldEnd()
    if self.blocked is not None:
      oprot.writeFieldBegin('blocked', TType.BOOL, 6)
      oprot.writeBool(self.blocked)
      oprot.writeFieldEnd()
    if self.userConnected is not None:
      oprot.writeFieldBegin('userConnected', TType.BOOL, 7)
      oprot.writeBool(self.userConnected)
      oprot.writeFieldEnd()
    if self.eventId is not None:
      oprot.writeFieldBegin('eventId', TType.I64, 8)
      oprot.writeI64(self.eventId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.contact)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.deactivated)
    value = (value * 31) ^ hash(self.sameBusiness)
    value = (value * 31) ^ hash(self.blocked)
    value = (value * 31) ^ hash(self.userConnected)
    value = (value * 31) ^ hash(self.eventId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Tag:
  """
  Attributes:
   - guid
   - name
   - parentGuid
   - updateSequenceNum
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'guid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'parentGuid', None, None, ), # 3
    (4, TType.I32, 'updateSequenceNum', None, None, ), # 4
  )

  def __init__(self, guid=None, name=None, parentGuid=None, updateSequenceNum=None,):
    self.guid = guid
    self.name = name
    self.parentGuid = parentGuid
    self.updateSequenceNum = updateSequenceNum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.guid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.parentGuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.updateSequenceNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Tag')
    if self.guid is not None:
      oprot.writeFieldBegin('guid', TType.STRING, 1)
      oprot.writeString(self.guid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.parentGuid is not None:
      oprot.writeFieldBegin('parentGuid', TType.STRING, 3)
      oprot.writeString(self.parentGuid)
      oprot.writeFieldEnd()
    if self.updateSequenceNum is not None:
      oprot.writeFieldBegin('updateSequenceNum', TType.I32, 4)
      oprot.writeI32(self.updateSequenceNum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.guid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.parentGuid)
    value = (value * 31) ^ hash(self.updateSequenceNum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LazyMap:
  """
  Attributes:
   - keysOnly
   - fullMap
  """

  thrift_spec = (
    None, # 0
    (1, TType.SET, 'keysOnly', (TType.STRING,None), None, ), # 1
    (2, TType.MAP, 'fullMap', (TType.STRING,None,TType.STRING,None), None, ), # 2
  )

  def __init__(self, keysOnly=None, fullMap=None,):
    self.keysOnly = keysOnly
    self.fullMap = fullMap

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.keysOnly = set()
          (_etype24, _size21) = iprot.readSetBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readString();
            self.keysOnly.add(_elem26)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.fullMap = {}
          (_ktype28, _vtype29, _size27 ) = iprot.readMapBegin()
          for _i31 in xrange(_size27):
            _key32 = iprot.readString();
            _val33 = iprot.readString();
            self.fullMap[_key32] = _val33
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LazyMap')
    if self.keysOnly is not None:
      oprot.writeFieldBegin('keysOnly', TType.SET, 1)
      oprot.writeSetBegin(TType.STRING, len(self.keysOnly))
      for iter34 in self.keysOnly:
        oprot.writeString(iter34)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.fullMap is not None:
      oprot.writeFieldBegin('fullMap', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.fullMap))
      for kiter35,viter36 in self.fullMap.items():
        oprot.writeString(kiter35)
        oprot.writeString(viter36)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.keysOnly)
    value = (value * 31) ^ hash(self.fullMap)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResourceAttributes:
  """
  Attributes:
   - sourceURL
   - timestamp
   - latitude
   - longitude
   - altitude
   - cameraMake
   - cameraModel
   - clientWillIndex
   - recoType
   - fileName
   - attachment
   - applicationData
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sourceURL', None, None, ), # 1
    (2, TType.I64, 'timestamp', None, None, ), # 2
    (3, TType.DOUBLE, 'latitude', None, None, ), # 3
    (4, TType.DOUBLE, 'longitude', None, None, ), # 4
    (5, TType.DOUBLE, 'altitude', None, None, ), # 5
    (6, TType.STRING, 'cameraMake', None, None, ), # 6
    (7, TType.STRING, 'cameraModel', None, None, ), # 7
    (8, TType.BOOL, 'clientWillIndex', None, None, ), # 8
    (9, TType.STRING, 'recoType', None, None, ), # 9
    (10, TType.STRING, 'fileName', None, None, ), # 10
    (11, TType.BOOL, 'attachment', None, None, ), # 11
    (12, TType.STRUCT, 'applicationData', (LazyMap, LazyMap.thrift_spec), None, ), # 12
  )

  def __init__(self, sourceURL=None, timestamp=None, latitude=None, longitude=None, altitude=None, cameraMake=None, cameraModel=None, clientWillIndex=None, recoType=None, fileName=None, attachment=None, applicationData=None,):
    self.sourceURL = sourceURL
    self.timestamp = timestamp
    self.latitude = latitude
    self.longitude = longitude
    self.altitude = altitude
    self.cameraMake = cameraMake
    self.cameraModel = cameraModel
    self.clientWillIndex = clientWillIndex
    self.recoType = recoType
    self.fileName = fileName
    self.attachment = attachment
    self.applicationData = applicationData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sourceURL = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.altitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.cameraMake = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.cameraModel = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.clientWillIndex = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.recoType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.fileName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.attachment = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.applicationData = LazyMap()
          self.applicationData.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResourceAttributes')
    if self.sourceURL is not None:
      oprot.writeFieldBegin('sourceURL', TType.STRING, 1)
      oprot.writeString(self.sourceURL)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 2)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 3)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 4)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.altitude is not None:
      oprot.writeFieldBegin('altitude', TType.DOUBLE, 5)
      oprot.writeDouble(self.altitude)
      oprot.writeFieldEnd()
    if self.cameraMake is not None:
      oprot.writeFieldBegin('cameraMake', TType.STRING, 6)
      oprot.writeString(self.cameraMake)
      oprot.writeFieldEnd()
    if self.cameraModel is not None:
      oprot.writeFieldBegin('cameraModel', TType.STRING, 7)
      oprot.writeString(self.cameraModel)
      oprot.writeFieldEnd()
    if self.clientWillIndex is not None:
      oprot.writeFieldBegin('clientWillIndex', TType.BOOL, 8)
      oprot.writeBool(self.clientWillIndex)
      oprot.writeFieldEnd()
    if self.recoType is not None:
      oprot.writeFieldBegin('recoType', TType.STRING, 9)
      oprot.writeString(self.recoType)
      oprot.writeFieldEnd()
    if self.fileName is not None:
      oprot.writeFieldBegin('fileName', TType.STRING, 10)
      oprot.writeString(self.fileName)
      oprot.writeFieldEnd()
    if self.attachment is not None:
      oprot.writeFieldBegin('attachment', TType.BOOL, 11)
      oprot.writeBool(self.attachment)
      oprot.writeFieldEnd()
    if self.applicationData is not None:
      oprot.writeFieldBegin('applicationData', TType.STRUCT, 12)
      self.applicationData.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sourceURL)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.latitude)
    value = (value * 31) ^ hash(self.longitude)
    value = (value * 31) ^ hash(self.altitude)
    value = (value * 31) ^ hash(self.cameraMake)
    value = (value * 31) ^ hash(self.cameraModel)
    value = (value * 31) ^ hash(self.clientWillIndex)
    value = (value * 31) ^ hash(self.recoType)
    value = (value * 31) ^ hash(self.fileName)
    value = (value * 31) ^ hash(self.attachment)
    value = (value * 31) ^ hash(self.applicationData)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Resource:
  """
  Attributes:
   - guid
   - noteGuid
   - data
   - mime
   - width
   - height
   - duration
   - active
   - recognition
   - attributes
   - updateSequenceNum
   - alternateData
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'guid', None, None, ), # 1
    (2, TType.STRING, 'noteGuid', None, None, ), # 2
    (3, TType.STRUCT, 'data', (Data, Data.thrift_spec), None, ), # 3
    (4, TType.STRING, 'mime', None, None, ), # 4
    (5, TType.I16, 'width', None, None, ), # 5
    (6, TType.I16, 'height', None, None, ), # 6
    (7, TType.I16, 'duration', None, None, ), # 7
    (8, TType.BOOL, 'active', None, None, ), # 8
    (9, TType.STRUCT, 'recognition', (Data, Data.thrift_spec), None, ), # 9
    None, # 10
    (11, TType.STRUCT, 'attributes', (ResourceAttributes, ResourceAttributes.thrift_spec), None, ), # 11
    (12, TType.I32, 'updateSequenceNum', None, None, ), # 12
    (13, TType.STRUCT, 'alternateData', (Data, Data.thrift_spec), None, ), # 13
  )

  def __init__(self, guid=None, noteGuid=None, data=None, mime=None, width=None, height=None, duration=None, active=None, recognition=None, attributes=None, updateSequenceNum=None, alternateData=None,):
    self.guid = guid
    self.noteGuid = noteGuid
    self.data = data
    self.mime = mime
    self.width = width
    self.height = height
    self.duration = duration
    self.active = active
    self.recognition = recognition
    self.attributes = attributes
    self.updateSequenceNum = updateSequenceNum
    self.alternateData = alternateData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.guid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.noteGuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.data = Data()
          self.data.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.width = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.height = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.duration = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.active = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRUCT:
          self.recognition = Data()
          self.recognition.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.attributes = ResourceAttributes()
          self.attributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.updateSequenceNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.alternateData = Data()
          self.alternateData.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Resource')
    if self.guid is not None:
      oprot.writeFieldBegin('guid', TType.STRING, 1)
      oprot.writeString(self.guid)
      oprot.writeFieldEnd()
    if self.noteGuid is not None:
      oprot.writeFieldBegin('noteGuid', TType.STRING, 2)
      oprot.writeString(self.noteGuid)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRUCT, 3)
      self.data.write(oprot)
      oprot.writeFieldEnd()
    if self.mime is not None:
      oprot.writeFieldBegin('mime', TType.STRING, 4)
      oprot.writeString(self.mime)
      oprot.writeFieldEnd()
    if self.width is not None:
      oprot.writeFieldBegin('width', TType.I16, 5)
      oprot.writeI16(self.width)
      oprot.writeFieldEnd()
    if self.height is not None:
      oprot.writeFieldBegin('height', TType.I16, 6)
      oprot.writeI16(self.height)
      oprot.writeFieldEnd()
    if self.duration is not None:
      oprot.writeFieldBegin('duration', TType.I16, 7)
      oprot.writeI16(self.duration)
      oprot.writeFieldEnd()
    if self.active is not None:
      oprot.writeFieldBegin('active', TType.BOOL, 8)
      oprot.writeBool(self.active)
      oprot.writeFieldEnd()
    if self.recognition is not None:
      oprot.writeFieldBegin('recognition', TType.STRUCT, 9)
      self.recognition.write(oprot)
      oprot.writeFieldEnd()
    if self.attributes is not None:
      oprot.writeFieldBegin('attributes', TType.STRUCT, 11)
      self.attributes.write(oprot)
      oprot.writeFieldEnd()
    if self.updateSequenceNum is not None:
      oprot.writeFieldBegin('updateSequenceNum', TType.I32, 12)
      oprot.writeI32(self.updateSequenceNum)
      oprot.writeFieldEnd()
    if self.alternateData is not None:
      oprot.writeFieldBegin('alternateData', TType.STRUCT, 13)
      self.alternateData.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.guid)
    value = (value * 31) ^ hash(self.noteGuid)
    value = (value * 31) ^ hash(self.data)
    value = (value * 31) ^ hash(self.mime)
    value = (value * 31) ^ hash(self.width)
    value = (value * 31) ^ hash(self.height)
    value = (value * 31) ^ hash(self.duration)
    value = (value * 31) ^ hash(self.active)
    value = (value * 31) ^ hash(self.recognition)
    value = (value * 31) ^ hash(self.attributes)
    value = (value * 31) ^ hash(self.updateSequenceNum)
    value = (value * 31) ^ hash(self.alternateData)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NoteAttributes:
  """
  Attributes:
   - subjectDate
   - latitude
   - longitude
   - altitude
   - author
   - source
   - sourceURL
   - sourceApplication
   - shareDate
   - reminderOrder
   - reminderDoneTime
   - reminderTime
   - placeName
   - contentClass
   - applicationData
   - lastEditedBy
   - classifications
   - creatorId
   - lastEditorId
   - sharedWithBusiness
   - conflictSourceNoteGuid
   - noteTitleQuality
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subjectDate', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.DOUBLE, 'latitude', None, None, ), # 10
    (11, TType.DOUBLE, 'longitude', None, None, ), # 11
    (12, TType.DOUBLE, 'altitude', None, None, ), # 12
    (13, TType.STRING, 'author', None, None, ), # 13
    (14, TType.STRING, 'source', None, None, ), # 14
    (15, TType.STRING, 'sourceURL', None, None, ), # 15
    (16, TType.STRING, 'sourceApplication', None, None, ), # 16
    (17, TType.I64, 'shareDate', None, None, ), # 17
    (18, TType.I64, 'reminderOrder', None, None, ), # 18
    (19, TType.I64, 'reminderDoneTime', None, None, ), # 19
    (20, TType.I64, 'reminderTime', None, None, ), # 20
    (21, TType.STRING, 'placeName', None, None, ), # 21
    (22, TType.STRING, 'contentClass', None, None, ), # 22
    (23, TType.STRUCT, 'applicationData', (LazyMap, LazyMap.thrift_spec), None, ), # 23
    (24, TType.STRING, 'lastEditedBy', None, None, ), # 24
    None, # 25
    (26, TType.MAP, 'classifications', (TType.STRING,None,TType.STRING,None), None, ), # 26
    (27, TType.I32, 'creatorId', None, None, ), # 27
    (28, TType.I32, 'lastEditorId', None, None, ), # 28
    (29, TType.BOOL, 'sharedWithBusiness', None, None, ), # 29
    (30, TType.STRING, 'conflictSourceNoteGuid', None, None, ), # 30
    (31, TType.I32, 'noteTitleQuality', None, None, ), # 31
  )

  def __init__(self, subjectDate=None, latitude=None, longitude=None, altitude=None, author=None, source=None, sourceURL=None, sourceApplication=None, shareDate=None, reminderOrder=None, reminderDoneTime=None, reminderTime=None, placeName=None, contentClass=None, applicationData=None, lastEditedBy=None, classifications=None, creatorId=None, lastEditorId=None, sharedWithBusiness=None, conflictSourceNoteGuid=None, noteTitleQuality=None,):
    self.subjectDate = subjectDate
    self.latitude = latitude
    self.longitude = longitude
    self.altitude = altitude
    self.author = author
    self.source = source
    self.sourceURL = sourceURL
    self.sourceApplication = sourceApplication
    self.shareDate = shareDate
    self.reminderOrder = reminderOrder
    self.reminderDoneTime = reminderDoneTime
    self.reminderTime = reminderTime
    self.placeName = placeName
    self.contentClass = contentClass
    self.applicationData = applicationData
    self.lastEditedBy = lastEditedBy
    self.classifications = classifications
    self.creatorId = creatorId
    self.lastEditorId = lastEditorId
    self.sharedWithBusiness = sharedWithBusiness
    self.conflictSourceNoteGuid = conflictSourceNoteGuid
    self.noteTitleQuality = noteTitleQuality

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subjectDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.altitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.author = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.sourceURL = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.sourceApplication = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I64:
          self.shareDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          self.reminderOrder = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          self.reminderDoneTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.reminderTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.placeName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.contentClass = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRUCT:
          self.applicationData = LazyMap()
          self.applicationData.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.lastEditedBy = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.MAP:
          self.classifications = {}
          (_ktype38, _vtype39, _size37 ) = iprot.readMapBegin()
          for _i41 in xrange(_size37):
            _key42 = iprot.readString();
            _val43 = iprot.readString();
            self.classifications[_key42] = _val43
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.creatorId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I32:
          self.lastEditorId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.BOOL:
          self.sharedWithBusiness = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.conflictSourceNoteGuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.noteTitleQuality = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NoteAttributes')
    if self.subjectDate is not None:
      oprot.writeFieldBegin('subjectDate', TType.I64, 1)
      oprot.writeI64(self.subjectDate)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 10)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 11)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.altitude is not None:
      oprot.writeFieldBegin('altitude', TType.DOUBLE, 12)
      oprot.writeDouble(self.altitude)
      oprot.writeFieldEnd()
    if self.author is not None:
      oprot.writeFieldBegin('author', TType.STRING, 13)
      oprot.writeString(self.author)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 14)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.sourceURL is not None:
      oprot.writeFieldBegin('sourceURL', TType.STRING, 15)
      oprot.writeString(self.sourceURL)
      oprot.writeFieldEnd()
    if self.sourceApplication is not None:
      oprot.writeFieldBegin('sourceApplication', TType.STRING, 16)
      oprot.writeString(self.sourceApplication)
      oprot.writeFieldEnd()
    if self.shareDate is not None:
      oprot.writeFieldBegin('shareDate', TType.I64, 17)
      oprot.writeI64(self.shareDate)
      oprot.writeFieldEnd()
    if self.reminderOrder is not None:
      oprot.writeFieldBegin('reminderOrder', TType.I64, 18)
      oprot.writeI64(self.reminderOrder)
      oprot.writeFieldEnd()
    if self.reminderDoneTime is not None:
      oprot.writeFieldBegin('reminderDoneTime', TType.I64, 19)
      oprot.writeI64(self.reminderDoneTime)
      oprot.writeFieldEnd()
    if self.reminderTime is not None:
      oprot.writeFieldBegin('reminderTime', TType.I64, 20)
      oprot.writeI64(self.reminderTime)
      oprot.writeFieldEnd()
    if self.placeName is not None:
      oprot.writeFieldBegin('placeName', TType.STRING, 21)
      oprot.writeString(self.placeName)
      oprot.writeFieldEnd()
    if self.contentClass is not None:
      oprot.writeFieldBegin('contentClass', TType.STRING, 22)
      oprot.writeString(self.contentClass)
      oprot.writeFieldEnd()
    if self.applicationData is not None:
      oprot.writeFieldBegin('applicationData', TType.STRUCT, 23)
      self.applicationData.write(oprot)
      oprot.writeFieldEnd()
    if self.lastEditedBy is not None:
      oprot.writeFieldBegin('lastEditedBy', TType.STRING, 24)
      oprot.writeString(self.lastEditedBy)
      oprot.writeFieldEnd()
    if self.classifications is not None:
      oprot.writeFieldBegin('classifications', TType.MAP, 26)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.classifications))
      for kiter44,viter45 in self.classifications.items():
        oprot.writeString(kiter44)
        oprot.writeString(viter45)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.creatorId is not None:
      oprot.writeFieldBegin('creatorId', TType.I32, 27)
      oprot.writeI32(self.creatorId)
      oprot.writeFieldEnd()
    if self.lastEditorId is not None:
      oprot.writeFieldBegin('lastEditorId', TType.I32, 28)
      oprot.writeI32(self.lastEditorId)
      oprot.writeFieldEnd()
    if self.sharedWithBusiness is not None:
      oprot.writeFieldBegin('sharedWithBusiness', TType.BOOL, 29)
      oprot.writeBool(self.sharedWithBusiness)
      oprot.writeFieldEnd()
    if self.conflictSourceNoteGuid is not None:
      oprot.writeFieldBegin('conflictSourceNoteGuid', TType.STRING, 30)
      oprot.writeString(self.conflictSourceNoteGuid)
      oprot.writeFieldEnd()
    if self.noteTitleQuality is not None:
      oprot.writeFieldBegin('noteTitleQuality', TType.I32, 31)
      oprot.writeI32(self.noteTitleQuality)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.subjectDate)
    value = (value * 31) ^ hash(self.latitude)
    value = (value * 31) ^ hash(self.longitude)
    value = (value * 31) ^ hash(self.altitude)
    value = (value * 31) ^ hash(self.author)
    value = (value * 31) ^ hash(self.source)
    value = (value * 31) ^ hash(self.sourceURL)
    value = (value * 31) ^ hash(self.sourceApplication)
    value = (value * 31) ^ hash(self.shareDate)
    value = (value * 31) ^ hash(self.reminderOrder)
    value = (value * 31) ^ hash(self.reminderDoneTime)
    value = (value * 31) ^ hash(self.reminderTime)
    value = (value * 31) ^ hash(self.placeName)
    value = (value * 31) ^ hash(self.contentClass)
    value = (value * 31) ^ hash(self.applicationData)
    value = (value * 31) ^ hash(self.lastEditedBy)
    value = (value * 31) ^ hash(self.classifications)
    value = (value * 31) ^ hash(self.creatorId)
    value = (value * 31) ^ hash(self.lastEditorId)
    value = (value * 31) ^ hash(self.sharedWithBusiness)
    value = (value * 31) ^ hash(self.conflictSourceNoteGuid)
    value = (value * 31) ^ hash(self.noteTitleQuality)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SharedNote:
  """
  Attributes:
   - sharerUserID
   - recipientIdentity
   - privilege
   - serviceCreated
   - serviceUpdated
   - serviceAssigned
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sharerUserID', None, None, ), # 1
    (2, TType.STRUCT, 'recipientIdentity', (Identity, Identity.thrift_spec), None, ), # 2
    (3, TType.I32, 'privilege', None, None, ), # 3
    (4, TType.I64, 'serviceCreated', None, None, ), # 4
    (5, TType.I64, 'serviceUpdated', None, None, ), # 5
    (6, TType.I64, 'serviceAssigned', None, None, ), # 6
  )

  def __init__(self, sharerUserID=None, recipientIdentity=None, privilege=None, serviceCreated=None, serviceUpdated=None, serviceAssigned=None,):
    self.sharerUserID = sharerUserID
    self.recipientIdentity = recipientIdentity
    self.privilege = privilege
    self.serviceCreated = serviceCreated
    self.serviceUpdated = serviceUpdated
    self.serviceAssigned = serviceAssigned

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sharerUserID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.recipientIdentity = Identity()
          self.recipientIdentity.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.privilege = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.serviceCreated = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.serviceUpdated = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.serviceAssigned = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SharedNote')
    if self.sharerUserID is not None:
      oprot.writeFieldBegin('sharerUserID', TType.I32, 1)
      oprot.writeI32(self.sharerUserID)
      oprot.writeFieldEnd()
    if self.recipientIdentity is not None:
      oprot.writeFieldBegin('recipientIdentity', TType.STRUCT, 2)
      self.recipientIdentity.write(oprot)
      oprot.writeFieldEnd()
    if self.privilege is not None:
      oprot.writeFieldBegin('privilege', TType.I32, 3)
      oprot.writeI32(self.privilege)
      oprot.writeFieldEnd()
    if self.serviceCreated is not None:
      oprot.writeFieldBegin('serviceCreated', TType.I64, 4)
      oprot.writeI64(self.serviceCreated)
      oprot.writeFieldEnd()
    if self.serviceUpdated is not None:
      oprot.writeFieldBegin('serviceUpdated', TType.I64, 5)
      oprot.writeI64(self.serviceUpdated)
      oprot.writeFieldEnd()
    if self.serviceAssigned is not None:
      oprot.writeFieldBegin('serviceAssigned', TType.I64, 6)
      oprot.writeI64(self.serviceAssigned)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sharerUserID)
    value = (value * 31) ^ hash(self.recipientIdentity)
    value = (value * 31) ^ hash(self.privilege)
    value = (value * 31) ^ hash(self.serviceCreated)
    value = (value * 31) ^ hash(self.serviceUpdated)
    value = (value * 31) ^ hash(self.serviceAssigned)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NoteRestrictions:
  """
  Attributes:
   - noUpdateTitle
   - noUpdateContent
   - noEmail
   - noShare
   - noSharePublicly
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'noUpdateTitle', None, None, ), # 1
    (2, TType.BOOL, 'noUpdateContent', None, None, ), # 2
    (3, TType.BOOL, 'noEmail', None, None, ), # 3
    (4, TType.BOOL, 'noShare', None, None, ), # 4
    (5, TType.BOOL, 'noSharePublicly', None, None, ), # 5
  )

  def __init__(self, noUpdateTitle=None, noUpdateContent=None, noEmail=None, noShare=None, noSharePublicly=None,):
    self.noUpdateTitle = noUpdateTitle
    self.noUpdateContent = noUpdateContent
    self.noEmail = noEmail
    self.noShare = noShare
    self.noSharePublicly = noSharePublicly

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.noUpdateTitle = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.noUpdateContent = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.noEmail = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.noShare = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.noSharePublicly = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NoteRestrictions')
    if self.noUpdateTitle is not None:
      oprot.writeFieldBegin('noUpdateTitle', TType.BOOL, 1)
      oprot.writeBool(self.noUpdateTitle)
      oprot.writeFieldEnd()
    if self.noUpdateContent is not None:
      oprot.writeFieldBegin('noUpdateContent', TType.BOOL, 2)
      oprot.writeBool(self.noUpdateContent)
      oprot.writeFieldEnd()
    if self.noEmail is not None:
      oprot.writeFieldBegin('noEmail', TType.BOOL, 3)
      oprot.writeBool(self.noEmail)
      oprot.writeFieldEnd()
    if self.noShare is not None:
      oprot.writeFieldBegin('noShare', TType.BOOL, 4)
      oprot.writeBool(self.noShare)
      oprot.writeFieldEnd()
    if self.noSharePublicly is not None:
      oprot.writeFieldBegin('noSharePublicly', TType.BOOL, 5)
      oprot.writeBool(self.noSharePublicly)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.noUpdateTitle)
    value = (value * 31) ^ hash(self.noUpdateContent)
    value = (value * 31) ^ hash(self.noEmail)
    value = (value * 31) ^ hash(self.noShare)
    value = (value * 31) ^ hash(self.noSharePublicly)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Note:
  """
  Attributes:
   - guid
   - title
   - content
   - contentHash
   - contentLength
   - created
   - updated
   - deleted
   - active
   - updateSequenceNum
   - notebookGuid
   - tagGuids
   - resources
   - attributes
   - tagNames
   - sharedNotes
   - restrictions
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'guid', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.STRING, 'content', None, None, ), # 3
    (4, TType.STRING, 'contentHash', None, None, ), # 4
    (5, TType.I32, 'contentLength', None, None, ), # 5
    (6, TType.I64, 'created', None, None, ), # 6
    (7, TType.I64, 'updated', None, None, ), # 7
    (8, TType.I64, 'deleted', None, None, ), # 8
    (9, TType.BOOL, 'active', None, None, ), # 9
    (10, TType.I32, 'updateSequenceNum', None, None, ), # 10
    (11, TType.STRING, 'notebookGuid', None, None, ), # 11
    (12, TType.LIST, 'tagGuids', (TType.STRING,None), None, ), # 12
    (13, TType.LIST, 'resources', (TType.STRUCT,(Resource, Resource.thrift_spec)), None, ), # 13
    (14, TType.STRUCT, 'attributes', (NoteAttributes, NoteAttributes.thrift_spec), None, ), # 14
    (15, TType.LIST, 'tagNames', (TType.STRING,None), None, ), # 15
    (16, TType.LIST, 'sharedNotes', (TType.STRUCT,(SharedNote, SharedNote.thrift_spec)), None, ), # 16
    (17, TType.STRUCT, 'restrictions', (NoteRestrictions, NoteRestrictions.thrift_spec), None, ), # 17
  )

  def __init__(self, guid=None, title=None, content=None, contentHash=None, contentLength=None, created=None, updated=None, deleted=None, active=None, updateSequenceNum=None, notebookGuid=None, tagGuids=None, resources=None, attributes=None, tagNames=None, sharedNotes=None, restrictions=None,):
    self.guid = guid
    self.title = title
    self.content = content
    self.contentHash = contentHash
    self.contentLength = contentLength
    self.created = created
    self.updated = updated
    self.deleted = deleted
    self.active = active
    self.updateSequenceNum = updateSequenceNum
    self.notebookGuid = notebookGuid
    self.tagGuids = tagGuids
    self.resources = resources
    self.attributes = attributes
    self.tagNames = tagNames
    self.sharedNotes = sharedNotes
    self.restrictions = restrictions

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.guid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.contentHash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.contentLength = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.created = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.updated = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.deleted = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.active = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.updateSequenceNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.notebookGuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.tagGuids = []
          (_etype49, _size46) = iprot.readListBegin()
          for _i50 in xrange(_size46):
            _elem51 = iprot.readString();
            self.tagGuids.append(_elem51)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.resources = []
          (_etype55, _size52) = iprot.readListBegin()
          for _i56 in xrange(_size52):
            _elem57 = Resource()
            _elem57.read(iprot)
            self.resources.append(_elem57)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRUCT:
          self.attributes = NoteAttributes()
          self.attributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.tagNames = []
          (_etype61, _size58) = iprot.readListBegin()
          for _i62 in xrange(_size58):
            _elem63 = iprot.readString();
            self.tagNames.append(_elem63)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.sharedNotes = []
          (_etype67, _size64) = iprot.readListBegin()
          for _i68 in xrange(_size64):
            _elem69 = SharedNote()
            _elem69.read(iprot)
            self.sharedNotes.append(_elem69)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRUCT:
          self.restrictions = NoteRestrictions()
          self.restrictions.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Note')
    if self.guid is not None:
      oprot.writeFieldBegin('guid', TType.STRING, 1)
      oprot.writeString(self.guid)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 3)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.contentHash is not None:
      oprot.writeFieldBegin('contentHash', TType.STRING, 4)
      oprot.writeString(self.contentHash)
      oprot.writeFieldEnd()
    if self.contentLength is not None:
      oprot.writeFieldBegin('contentLength', TType.I32, 5)
      oprot.writeI32(self.contentLength)
      oprot.writeFieldEnd()
    if self.created is not None:
      oprot.writeFieldBegin('created', TType.I64, 6)
      oprot.writeI64(self.created)
      oprot.writeFieldEnd()
    if self.updated is not None:
      oprot.writeFieldBegin('updated', TType.I64, 7)
      oprot.writeI64(self.updated)
      oprot.writeFieldEnd()
    if self.deleted is not None:
      oprot.writeFieldBegin('deleted', TType.I64, 8)
      oprot.writeI64(self.deleted)
      oprot.writeFieldEnd()
    if self.active is not None:
      oprot.writeFieldBegin('active', TType.BOOL, 9)
      oprot.writeBool(self.active)
      oprot.writeFieldEnd()
    if self.updateSequenceNum is not None:
      oprot.writeFieldBegin('updateSequenceNum', TType.I32, 10)
      oprot.writeI32(self.updateSequenceNum)
      oprot.writeFieldEnd()
    if self.notebookGuid is not None:
      oprot.writeFieldBegin('notebookGuid', TType.STRING, 11)
      oprot.writeString(self.notebookGuid)
      oprot.writeFieldEnd()
    if self.tagGuids is not None:
      oprot.writeFieldBegin('tagGuids', TType.LIST, 12)
      oprot.writeListBegin(TType.STRING, len(self.tagGuids))
      for iter70 in self.tagGuids:
        oprot.writeString(iter70)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.resources is not None:
      oprot.writeFieldBegin('resources', TType.LIST, 13)
      oprot.writeListBegin(TType.STRUCT, len(self.resources))
      for iter71 in self.resources:
        iter71.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.attributes is not None:
      oprot.writeFieldBegin('attributes', TType.STRUCT, 14)
      self.attributes.write(oprot)
      oprot.writeFieldEnd()
    if self.tagNames is not None:
      oprot.writeFieldBegin('tagNames', TType.LIST, 15)
      oprot.writeListBegin(TType.STRING, len(self.tagNames))
      for iter72 in self.tagNames:
        oprot.writeString(iter72)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sharedNotes is not None:
      oprot.writeFieldBegin('sharedNotes', TType.LIST, 16)
      oprot.writeListBegin(TType.STRUCT, len(self.sharedNotes))
      for iter73 in self.sharedNotes:
        iter73.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.restrictions is not None:
      oprot.writeFieldBegin('restrictions', TType.STRUCT, 17)
      self.restrictions.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.guid)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.content)
    value = (value * 31) ^ hash(self.contentHash)
    value = (value * 31) ^ hash(self.contentLength)
    value = (value * 31) ^ hash(self.created)
    value = (value * 31) ^ hash(self.updated)
    value = (value * 31) ^ hash(self.deleted)
    value = (value * 31) ^ hash(self.active)
    value = (value * 31) ^ hash(self.updateSequenceNum)
    value = (value * 31) ^ hash(self.notebookGuid)
    value = (value * 31) ^ hash(self.tagGuids)
    value = (value * 31) ^ hash(self.resources)
    value = (value * 31) ^ hash(self.attributes)
    value = (value * 31) ^ hash(self.tagNames)
    value = (value * 31) ^ hash(self.sharedNotes)
    value = (value * 31) ^ hash(self.restrictions)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Publishing:
  """
  Attributes:
   - uri
   - order
   - ascending
   - publicDescription
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uri', None, None, ), # 1
    (2, TType.I32, 'order', None, None, ), # 2
    (3, TType.BOOL, 'ascending', None, None, ), # 3
    (4, TType.STRING, 'publicDescription', None, None, ), # 4
  )

  def __init__(self, uri=None, order=None, ascending=None, publicDescription=None,):
    self.uri = uri
    self.order = order
    self.ascending = ascending
    self.publicDescription = publicDescription

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uri = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.order = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.ascending = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.publicDescription = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Publishing')
    if self.uri is not None:
      oprot.writeFieldBegin('uri', TType.STRING, 1)
      oprot.writeString(self.uri)
      oprot.writeFieldEnd()
    if self.order is not None:
      oprot.writeFieldBegin('order', TType.I32, 2)
      oprot.writeI32(self.order)
      oprot.writeFieldEnd()
    if self.ascending is not None:
      oprot.writeFieldBegin('ascending', TType.BOOL, 3)
      oprot.writeBool(self.ascending)
      oprot.writeFieldEnd()
    if self.publicDescription is not None:
      oprot.writeFieldBegin('publicDescription', TType.STRING, 4)
      oprot.writeString(self.publicDescription)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uri)
    value = (value * 31) ^ hash(self.order)
    value = (value * 31) ^ hash(self.ascending)
    value = (value * 31) ^ hash(self.publicDescription)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BusinessNotebook:
  """
  Attributes:
   - notebookDescription
   - privilege
   - recommended
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'notebookDescription', None, None, ), # 1
    (2, TType.I32, 'privilege', None, None, ), # 2
    (3, TType.BOOL, 'recommended', None, None, ), # 3
  )

  def __init__(self, notebookDescription=None, privilege=None, recommended=None,):
    self.notebookDescription = notebookDescription
    self.privilege = privilege
    self.recommended = recommended

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.notebookDescription = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.privilege = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.recommended = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BusinessNotebook')
    if self.notebookDescription is not None:
      oprot.writeFieldBegin('notebookDescription', TType.STRING, 1)
      oprot.writeString(self.notebookDescription)
      oprot.writeFieldEnd()
    if self.privilege is not None:
      oprot.writeFieldBegin('privilege', TType.I32, 2)
      oprot.writeI32(self.privilege)
      oprot.writeFieldEnd()
    if self.recommended is not None:
      oprot.writeFieldBegin('recommended', TType.BOOL, 3)
      oprot.writeBool(self.recommended)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.notebookDescription)
    value = (value * 31) ^ hash(self.privilege)
    value = (value * 31) ^ hash(self.recommended)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SavedSearchScope:
  """
  Attributes:
   - includeAccount
   - includePersonalLinkedNotebooks
   - includeBusinessLinkedNotebooks
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'includeAccount', None, None, ), # 1
    (2, TType.BOOL, 'includePersonalLinkedNotebooks', None, None, ), # 2
    (3, TType.BOOL, 'includeBusinessLinkedNotebooks', None, None, ), # 3
  )

  def __init__(self, includeAccount=None, includePersonalLinkedNotebooks=None, includeBusinessLinkedNotebooks=None,):
    self.includeAccount = includeAccount
    self.includePersonalLinkedNotebooks = includePersonalLinkedNotebooks
    self.includeBusinessLinkedNotebooks = includeBusinessLinkedNotebooks

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.includeAccount = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.includePersonalLinkedNotebooks = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.includeBusinessLinkedNotebooks = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SavedSearchScope')
    if self.includeAccount is not None:
      oprot.writeFieldBegin('includeAccount', TType.BOOL, 1)
      oprot.writeBool(self.includeAccount)
      oprot.writeFieldEnd()
    if self.includePersonalLinkedNotebooks is not None:
      oprot.writeFieldBegin('includePersonalLinkedNotebooks', TType.BOOL, 2)
      oprot.writeBool(self.includePersonalLinkedNotebooks)
      oprot.writeFieldEnd()
    if self.includeBusinessLinkedNotebooks is not None:
      oprot.writeFieldBegin('includeBusinessLinkedNotebooks', TType.BOOL, 3)
      oprot.writeBool(self.includeBusinessLinkedNotebooks)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.includeAccount)
    value = (value * 31) ^ hash(self.includePersonalLinkedNotebooks)
    value = (value * 31) ^ hash(self.includeBusinessLinkedNotebooks)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SavedSearch:
  """
  Attributes:
   - guid
   - name
   - query
   - format
   - updateSequenceNum
   - scope
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'guid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'query', None, None, ), # 3
    (4, TType.I32, 'format', None, None, ), # 4
    (5, TType.I32, 'updateSequenceNum', None, None, ), # 5
    (6, TType.STRUCT, 'scope', (SavedSearchScope, SavedSearchScope.thrift_spec), None, ), # 6
  )

  def __init__(self, guid=None, name=None, query=None, format=None, updateSequenceNum=None, scope=None,):
    self.guid = guid
    self.name = name
    self.query = query
    self.format = format
    self.updateSequenceNum = updateSequenceNum
    self.scope = scope

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.guid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.query = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.format = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.updateSequenceNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.scope = SavedSearchScope()
          self.scope.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SavedSearch')
    if self.guid is not None:
      oprot.writeFieldBegin('guid', TType.STRING, 1)
      oprot.writeString(self.guid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.query is not None:
      oprot.writeFieldBegin('query', TType.STRING, 3)
      oprot.writeString(self.query)
      oprot.writeFieldEnd()
    if self.format is not None:
      oprot.writeFieldBegin('format', TType.I32, 4)
      oprot.writeI32(self.format)
      oprot.writeFieldEnd()
    if self.updateSequenceNum is not None:
      oprot.writeFieldBegin('updateSequenceNum', TType.I32, 5)
      oprot.writeI32(self.updateSequenceNum)
      oprot.writeFieldEnd()
    if self.scope is not None:
      oprot.writeFieldBegin('scope', TType.STRUCT, 6)
      self.scope.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.guid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.query)
    value = (value * 31) ^ hash(self.format)
    value = (value * 31) ^ hash(self.updateSequenceNum)
    value = (value * 31) ^ hash(self.scope)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Ad:
  """
  Attributes:
   - id
   - width
   - height
   - advertiserName
   - imageUrl
   - destinationUrl
   - displaySeconds
   - score
   - image
   - imageMime
   - html
   - displayFrequency
   - openInTrunk
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I16, 'width', None, None, ), # 2
    (3, TType.I16, 'height', None, None, ), # 3
    (4, TType.STRING, 'advertiserName', None, None, ), # 4
    (5, TType.STRING, 'imageUrl', None, None, ), # 5
    (6, TType.STRING, 'destinationUrl', None, None, ), # 6
    (7, TType.I16, 'displaySeconds', None, None, ), # 7
    (8, TType.DOUBLE, 'score', None, None, ), # 8
    (9, TType.STRING, 'image', None, None, ), # 9
    (10, TType.STRING, 'imageMime', None, None, ), # 10
    (11, TType.STRING, 'html', None, None, ), # 11
    (12, TType.DOUBLE, 'displayFrequency', None, None, ), # 12
    (13, TType.BOOL, 'openInTrunk', None, None, ), # 13
  )

  def __init__(self, id=None, width=None, height=None, advertiserName=None, imageUrl=None, destinationUrl=None, displaySeconds=None, score=None, image=None, imageMime=None, html=None, displayFrequency=None, openInTrunk=None,):
    self.id = id
    self.width = width
    self.height = height
    self.advertiserName = advertiserName
    self.imageUrl = imageUrl
    self.destinationUrl = destinationUrl
    self.displaySeconds = displaySeconds
    self.score = score
    self.image = image
    self.imageMime = imageMime
    self.html = html
    self.displayFrequency = displayFrequency
    self.openInTrunk = openInTrunk

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.width = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.height = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.advertiserName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.imageUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.destinationUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.displaySeconds = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.image = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.imageMime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.html = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.displayFrequency = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BOOL:
          self.openInTrunk = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Ad')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.width is not None:
      oprot.writeFieldBegin('width', TType.I16, 2)
      oprot.writeI16(self.width)
      oprot.writeFieldEnd()
    if self.height is not None:
      oprot.writeFieldBegin('height', TType.I16, 3)
      oprot.writeI16(self.height)
      oprot.writeFieldEnd()
    if self.advertiserName is not None:
      oprot.writeFieldBegin('advertiserName', TType.STRING, 4)
      oprot.writeString(self.advertiserName)
      oprot.writeFieldEnd()
    if self.imageUrl is not None:
      oprot.writeFieldBegin('imageUrl', TType.STRING, 5)
      oprot.writeString(self.imageUrl)
      oprot.writeFieldEnd()
    if self.destinationUrl is not None:
      oprot.writeFieldBegin('destinationUrl', TType.STRING, 6)
      oprot.writeString(self.destinationUrl)
      oprot.writeFieldEnd()
    if self.displaySeconds is not None:
      oprot.writeFieldBegin('displaySeconds', TType.I16, 7)
      oprot.writeI16(self.displaySeconds)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 8)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    if self.image is not None:
      oprot.writeFieldBegin('image', TType.STRING, 9)
      oprot.writeString(self.image)
      oprot.writeFieldEnd()
    if self.imageMime is not None:
      oprot.writeFieldBegin('imageMime', TType.STRING, 10)
      oprot.writeString(self.imageMime)
      oprot.writeFieldEnd()
    if self.html is not None:
      oprot.writeFieldBegin('html', TType.STRING, 11)
      oprot.writeString(self.html)
      oprot.writeFieldEnd()
    if self.displayFrequency is not None:
      oprot.writeFieldBegin('displayFrequency', TType.DOUBLE, 12)
      oprot.writeDouble(self.displayFrequency)
      oprot.writeFieldEnd()
    if self.openInTrunk is not None:
      oprot.writeFieldBegin('openInTrunk', TType.BOOL, 13)
      oprot.writeBool(self.openInTrunk)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.width)
    value = (value * 31) ^ hash(self.height)
    value = (value * 31) ^ hash(self.advertiserName)
    value = (value * 31) ^ hash(self.imageUrl)
    value = (value * 31) ^ hash(self.destinationUrl)
    value = (value * 31) ^ hash(self.displaySeconds)
    value = (value * 31) ^ hash(self.score)
    value = (value * 31) ^ hash(self.image)
    value = (value * 31) ^ hash(self.imageMime)
    value = (value * 31) ^ hash(self.html)
    value = (value * 31) ^ hash(self.displayFrequency)
    value = (value * 31) ^ hash(self.openInTrunk)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SharedNotebookRecipientSettings:
  """
  Attributes:
   - reminderNotifyEmail
   - reminderNotifyInApp
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'reminderNotifyEmail', None, None, ), # 1
    (2, TType.BOOL, 'reminderNotifyInApp', None, None, ), # 2
  )

  def __init__(self, reminderNotifyEmail=None, reminderNotifyInApp=None,):
    self.reminderNotifyEmail = reminderNotifyEmail
    self.reminderNotifyInApp = reminderNotifyInApp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.reminderNotifyEmail = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.reminderNotifyInApp = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SharedNotebookRecipientSettings')
    if self.reminderNotifyEmail is not None:
      oprot.writeFieldBegin('reminderNotifyEmail', TType.BOOL, 1)
      oprot.writeBool(self.reminderNotifyEmail)
      oprot.writeFieldEnd()
    if self.reminderNotifyInApp is not None:
      oprot.writeFieldBegin('reminderNotifyInApp', TType.BOOL, 2)
      oprot.writeBool(self.reminderNotifyInApp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.reminderNotifyEmail)
    value = (value * 31) ^ hash(self.reminderNotifyInApp)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NotebookRecipientSettings:
  """
  Attributes:
   - reminderNotifyEmail
   - reminderNotifyInApp
   - inMyList
   - stack
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'reminderNotifyEmail', None, None, ), # 1
    (2, TType.BOOL, 'reminderNotifyInApp', None, None, ), # 2
    (3, TType.BOOL, 'inMyList', None, None, ), # 3
    (4, TType.STRING, 'stack', None, None, ), # 4
  )

  def __init__(self, reminderNotifyEmail=None, reminderNotifyInApp=None, inMyList=None, stack=None,):
    self.reminderNotifyEmail = reminderNotifyEmail
    self.reminderNotifyInApp = reminderNotifyInApp
    self.inMyList = inMyList
    self.stack = stack

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.reminderNotifyEmail = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.reminderNotifyInApp = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.inMyList = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.stack = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NotebookRecipientSettings')
    if self.reminderNotifyEmail is not None:
      oprot.writeFieldBegin('reminderNotifyEmail', TType.BOOL, 1)
      oprot.writeBool(self.reminderNotifyEmail)
      oprot.writeFieldEnd()
    if self.reminderNotifyInApp is not None:
      oprot.writeFieldBegin('reminderNotifyInApp', TType.BOOL, 2)
      oprot.writeBool(self.reminderNotifyInApp)
      oprot.writeFieldEnd()
    if self.inMyList is not None:
      oprot.writeFieldBegin('inMyList', TType.BOOL, 3)
      oprot.writeBool(self.inMyList)
      oprot.writeFieldEnd()
    if self.stack is not None:
      oprot.writeFieldBegin('stack', TType.STRING, 4)
      oprot.writeString(self.stack)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.reminderNotifyEmail)
    value = (value * 31) ^ hash(self.reminderNotifyInApp)
    value = (value * 31) ^ hash(self.inMyList)
    value = (value * 31) ^ hash(self.stack)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SharedNotebook:
  """
  Attributes:
   - id
   - userId
   - notebookGuid
   - email
   - recipientIdentityId
   - notebookModifiable
   - requireLogin
   - serviceCreated
   - serviceUpdated
   - globalId
   - username
   - privilege
   - allowPreview
   - recipientSettings
   - sharerUserId
   - recipientUsername
   - recipientUserId
   - serviceAssigned
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I32, 'userId', None, None, ), # 2
    (3, TType.STRING, 'notebookGuid', None, None, ), # 3
    (4, TType.STRING, 'email', None, None, ), # 4
    (5, TType.BOOL, 'notebookModifiable', None, None, ), # 5
    (6, TType.BOOL, 'requireLogin', None, None, ), # 6
    (7, TType.I64, 'serviceCreated', None, None, ), # 7
    (8, TType.STRING, 'globalId', None, None, ), # 8
    (9, TType.STRING, 'username', None, None, ), # 9
    (10, TType.I64, 'serviceUpdated', None, None, ), # 10
    (11, TType.I32, 'privilege', None, None, ), # 11
    (12, TType.BOOL, 'allowPreview', None, None, ), # 12
    (13, TType.STRUCT, 'recipientSettings', (SharedNotebookRecipientSettings, SharedNotebookRecipientSettings.thrift_spec), None, ), # 13
    (14, TType.I32, 'sharerUserId', None, None, ), # 14
    (15, TType.STRING, 'recipientUsername', None, None, ), # 15
    (16, TType.I64, 'serviceAssigned', None, None, ), # 16
    (17, TType.I32, 'recipientUserId', None, None, ), # 17
    (18, TType.I64, 'recipientIdentityId', None, None, ), # 18
  )

  def __init__(self, id=None, userId=None, notebookGuid=None, email=None, recipientIdentityId=None, notebookModifiable=None, requireLogin=None, serviceCreated=None, serviceUpdated=None, globalId=None, username=None, privilege=None, allowPreview=None, recipientSettings=None, sharerUserId=None, recipientUsername=None, recipientUserId=None, serviceAssigned=None,):
    self.id = id
    self.userId = userId
    self.notebookGuid = notebookGuid
    self.email = email
    self.recipientIdentityId = recipientIdentityId
    self.notebookModifiable = notebookModifiable
    self.requireLogin = requireLogin
    self.serviceCreated = serviceCreated
    self.serviceUpdated = serviceUpdated
    self.globalId = globalId
    self.username = username
    self.privilege = privilege
    self.allowPreview = allowPreview
    self.recipientSettings = recipientSettings
    self.sharerUserId = sharerUserId
    self.recipientUsername = recipientUsername
    self.recipientUserId = recipientUserId
    self.serviceAssigned = serviceAssigned

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.userId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.notebookGuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          self.recipientIdentityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.notebookModifiable = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.requireLogin = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.serviceCreated = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.serviceUpdated = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.globalId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.privilege = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.allowPreview = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.recipientSettings = SharedNotebookRecipientSettings()
          self.recipientSettings.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.sharerUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.recipientUsername = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.recipientUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          self.serviceAssigned = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SharedNotebook')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I32, 2)
      oprot.writeI32(self.userId)
      oprot.writeFieldEnd()
    if self.notebookGuid is not None:
      oprot.writeFieldBegin('notebookGuid', TType.STRING, 3)
      oprot.writeString(self.notebookGuid)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 4)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.notebookModifiable is not None:
      oprot.writeFieldBegin('notebookModifiable', TType.BOOL, 5)
      oprot.writeBool(self.notebookModifiable)
      oprot.writeFieldEnd()
    if self.requireLogin is not None:
      oprot.writeFieldBegin('requireLogin', TType.BOOL, 6)
      oprot.writeBool(self.requireLogin)
      oprot.writeFieldEnd()
    if self.serviceCreated is not None:
      oprot.writeFieldBegin('serviceCreated', TType.I64, 7)
      oprot.writeI64(self.serviceCreated)
      oprot.writeFieldEnd()
    if self.globalId is not None:
      oprot.writeFieldBegin('globalId', TType.STRING, 8)
      oprot.writeString(self.globalId)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 9)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.serviceUpdated is not None:
      oprot.writeFieldBegin('serviceUpdated', TType.I64, 10)
      oprot.writeI64(self.serviceUpdated)
      oprot.writeFieldEnd()
    if self.privilege is not None:
      oprot.writeFieldBegin('privilege', TType.I32, 11)
      oprot.writeI32(self.privilege)
      oprot.writeFieldEnd()
    if self.allowPreview is not None:
      oprot.writeFieldBegin('allowPreview', TType.BOOL, 12)
      oprot.writeBool(self.allowPreview)
      oprot.writeFieldEnd()
    if self.recipientSettings is not None:
      oprot.writeFieldBegin('recipientSettings', TType.STRUCT, 13)
      self.recipientSettings.write(oprot)
      oprot.writeFieldEnd()
    if self.sharerUserId is not None:
      oprot.writeFieldBegin('sharerUserId', TType.I32, 14)
      oprot.writeI32(self.sharerUserId)
      oprot.writeFieldEnd()
    if self.recipientUsername is not None:
      oprot.writeFieldBegin('recipientUsername', TType.STRING, 15)
      oprot.writeString(self.recipientUsername)
      oprot.writeFieldEnd()
    if self.serviceAssigned is not None:
      oprot.writeFieldBegin('serviceAssigned', TType.I64, 16)
      oprot.writeI64(self.serviceAssigned)
      oprot.writeFieldEnd()
    if self.recipientUserId is not None:
      oprot.writeFieldBegin('recipientUserId', TType.I32, 17)
      oprot.writeI32(self.recipientUserId)
      oprot.writeFieldEnd()
    if self.recipientIdentityId is not None:
      oprot.writeFieldBegin('recipientIdentityId', TType.I64, 18)
      oprot.writeI64(self.recipientIdentityId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.notebookGuid)
    value = (value * 31) ^ hash(self.email)
    value = (value * 31) ^ hash(self.recipientIdentityId)
    value = (value * 31) ^ hash(self.notebookModifiable)
    value = (value * 31) ^ hash(self.requireLogin)
    value = (value * 31) ^ hash(self.serviceCreated)
    value = (value * 31) ^ hash(self.serviceUpdated)
    value = (value * 31) ^ hash(self.globalId)
    value = (value * 31) ^ hash(self.username)
    value = (value * 31) ^ hash(self.privilege)
    value = (value * 31) ^ hash(self.allowPreview)
    value = (value * 31) ^ hash(self.recipientSettings)
    value = (value * 31) ^ hash(self.sharerUserId)
    value = (value * 31) ^ hash(self.recipientUsername)
    value = (value * 31) ^ hash(self.recipientUserId)
    value = (value * 31) ^ hash(self.serviceAssigned)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NotebookRestrictions:
  """
  Attributes:
   - noReadNotes
   - noCreateNotes
   - noUpdateNotes
   - noExpungeNotes
   - noShareNotes
   - noEmailNotes
   - noSendMessageToRecipients
   - noUpdateNotebook
   - noExpungeNotebook
   - noSetDefaultNotebook
   - noSetNotebookStack
   - noPublishToPublic
   - noPublishToBusinessLibrary
   - noCreateTags
   - noUpdateTags
   - noExpungeTags
   - noSetParentTag
   - noCreateSharedNotebooks
   - updateWhichSharedNotebookRestrictions
   - expungeWhichSharedNotebookRestrictions
   - noShareNotesWithBusiness
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'noReadNotes', None, None, ), # 1
    (2, TType.BOOL, 'noCreateNotes', None, None, ), # 2
    (3, TType.BOOL, 'noUpdateNotes', None, None, ), # 3
    (4, TType.BOOL, 'noExpungeNotes', None, None, ), # 4
    (5, TType.BOOL, 'noShareNotes', None, None, ), # 5
    (6, TType.BOOL, 'noEmailNotes', None, None, ), # 6
    (7, TType.BOOL, 'noSendMessageToRecipients', None, None, ), # 7
    (8, TType.BOOL, 'noUpdateNotebook', None, None, ), # 8
    (9, TType.BOOL, 'noExpungeNotebook', None, None, ), # 9
    (10, TType.BOOL, 'noSetDefaultNotebook', None, None, ), # 10
    (11, TType.BOOL, 'noSetNotebookStack', None, None, ), # 11
    (12, TType.BOOL, 'noPublishToPublic', None, None, ), # 12
    (13, TType.BOOL, 'noPublishToBusinessLibrary', None, None, ), # 13
    (14, TType.BOOL, 'noCreateTags', None, None, ), # 14
    (15, TType.BOOL, 'noUpdateTags', None, None, ), # 15
    (16, TType.BOOL, 'noExpungeTags', None, None, ), # 16
    (17, TType.BOOL, 'noSetParentTag', None, None, ), # 17
    (18, TType.BOOL, 'noCreateSharedNotebooks', None, None, ), # 18
    (19, TType.I32, 'updateWhichSharedNotebookRestrictions', None, None, ), # 19
    (20, TType.I32, 'expungeWhichSharedNotebookRestrictions', None, None, ), # 20
    (21, TType.BOOL, 'noShareNotesWithBusiness', None, None, ), # 21
  )

  def __init__(self, noReadNotes=None, noCreateNotes=None, noUpdateNotes=None, noExpungeNotes=None, noShareNotes=None, noEmailNotes=None, noSendMessageToRecipients=None, noUpdateNotebook=None, noExpungeNotebook=None, noSetDefaultNotebook=None, noSetNotebookStack=None, noPublishToPublic=None, noPublishToBusinessLibrary=None, noCreateTags=None, noUpdateTags=None, noExpungeTags=None, noSetParentTag=None, noCreateSharedNotebooks=None, updateWhichSharedNotebookRestrictions=None, expungeWhichSharedNotebookRestrictions=None, noShareNotesWithBusiness=None,):
    self.noReadNotes = noReadNotes
    self.noCreateNotes = noCreateNotes
    self.noUpdateNotes = noUpdateNotes
    self.noExpungeNotes = noExpungeNotes
    self.noShareNotes = noShareNotes
    self.noEmailNotes = noEmailNotes
    self.noSendMessageToRecipients = noSendMessageToRecipients
    self.noUpdateNotebook = noUpdateNotebook
    self.noExpungeNotebook = noExpungeNotebook
    self.noSetDefaultNotebook = noSetDefaultNotebook
    self.noSetNotebookStack = noSetNotebookStack
    self.noPublishToPublic = noPublishToPublic
    self.noPublishToBusinessLibrary = noPublishToBusinessLibrary
    self.noCreateTags = noCreateTags
    self.noUpdateTags = noUpdateTags
    self.noExpungeTags = noExpungeTags
    self.noSetParentTag = noSetParentTag
    self.noCreateSharedNotebooks = noCreateSharedNotebooks
    self.updateWhichSharedNotebookRestrictions = updateWhichSharedNotebookRestrictions
    self.expungeWhichSharedNotebookRestrictions = expungeWhichSharedNotebookRestrictions
    self.noShareNotesWithBusiness = noShareNotesWithBusiness

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.noReadNotes = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.noCreateNotes = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.noUpdateNotes = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.noExpungeNotes = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.noShareNotes = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.noEmailNotes = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.noSendMessageToRecipients = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.noUpdateNotebook = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.noExpungeNotebook = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.noSetDefaultNotebook = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.noSetNotebookStack = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.noPublishToPublic = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BOOL:
          self.noPublishToBusinessLibrary = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.BOOL:
          self.noCreateTags = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.BOOL:
          self.noUpdateTags = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.BOOL:
          self.noExpungeTags = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.BOOL:
          self.noSetParentTag = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.BOOL:
          self.noCreateSharedNotebooks = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.updateWhichSharedNotebookRestrictions = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.expungeWhichSharedNotebookRestrictions = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.BOOL:
          self.noShareNotesWithBusiness = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NotebookRestrictions')
    if self.noReadNotes is not None:
      oprot.writeFieldBegin('noReadNotes', TType.BOOL, 1)
      oprot.writeBool(self.noReadNotes)
      oprot.writeFieldEnd()
    if self.noCreateNotes is not None:
      oprot.writeFieldBegin('noCreateNotes', TType.BOOL, 2)
      oprot.writeBool(self.noCreateNotes)
      oprot.writeFieldEnd()
    if self.noUpdateNotes is not None:
      oprot.writeFieldBegin('noUpdateNotes', TType.BOOL, 3)
      oprot.writeBool(self.noUpdateNotes)
      oprot.writeFieldEnd()
    if self.noExpungeNotes is not None:
      oprot.writeFieldBegin('noExpungeNotes', TType.BOOL, 4)
      oprot.writeBool(self.noExpungeNotes)
      oprot.writeFieldEnd()
    if self.noShareNotes is not None:
      oprot.writeFieldBegin('noShareNotes', TType.BOOL, 5)
      oprot.writeBool(self.noShareNotes)
      oprot.writeFieldEnd()
    if self.noEmailNotes is not None:
      oprot.writeFieldBegin('noEmailNotes', TType.BOOL, 6)
      oprot.writeBool(self.noEmailNotes)
      oprot.writeFieldEnd()
    if self.noSendMessageToRecipients is not None:
      oprot.writeFieldBegin('noSendMessageToRecipients', TType.BOOL, 7)
      oprot.writeBool(self.noSendMessageToRecipients)
      oprot.writeFieldEnd()
    if self.noUpdateNotebook is not None:
      oprot.writeFieldBegin('noUpdateNotebook', TType.BOOL, 8)
      oprot.writeBool(self.noUpdateNotebook)
      oprot.writeFieldEnd()
    if self.noExpungeNotebook is not None:
      oprot.writeFieldBegin('noExpungeNotebook', TType.BOOL, 9)
      oprot.writeBool(self.noExpungeNotebook)
      oprot.writeFieldEnd()
    if self.noSetDefaultNotebook is not None:
      oprot.writeFieldBegin('noSetDefaultNotebook', TType.BOOL, 10)
      oprot.writeBool(self.noSetDefaultNotebook)
      oprot.writeFieldEnd()
    if self.noSetNotebookStack is not None:
      oprot.writeFieldBegin('noSetNotebookStack', TType.BOOL, 11)
      oprot.writeBool(self.noSetNotebookStack)
      oprot.writeFieldEnd()
    if self.noPublishToPublic is not None:
      oprot.writeFieldBegin('noPublishToPublic', TType.BOOL, 12)
      oprot.writeBool(self.noPublishToPublic)
      oprot.writeFieldEnd()
    if self.noPublishToBusinessLibrary is not None:
      oprot.writeFieldBegin('noPublishToBusinessLibrary', TType.BOOL, 13)
      oprot.writeBool(self.noPublishToBusinessLibrary)
      oprot.writeFieldEnd()
    if self.noCreateTags is not None:
      oprot.writeFieldBegin('noCreateTags', TType.BOOL, 14)
      oprot.writeBool(self.noCreateTags)
      oprot.writeFieldEnd()
    if self.noUpdateTags is not None:
      oprot.writeFieldBegin('noUpdateTags', TType.BOOL, 15)
      oprot.writeBool(self.noUpdateTags)
      oprot.writeFieldEnd()
    if self.noExpungeTags is not None:
      oprot.writeFieldBegin('noExpungeTags', TType.BOOL, 16)
      oprot.writeBool(self.noExpungeTags)
      oprot.writeFieldEnd()
    if self.noSetParentTag is not None:
      oprot.writeFieldBegin('noSetParentTag', TType.BOOL, 17)
      oprot.writeBool(self.noSetParentTag)
      oprot.writeFieldEnd()
    if self.noCreateSharedNotebooks is not None:
      oprot.writeFieldBegin('noCreateSharedNotebooks', TType.BOOL, 18)
      oprot.writeBool(self.noCreateSharedNotebooks)
      oprot.writeFieldEnd()
    if self.updateWhichSharedNotebookRestrictions is not None:
      oprot.writeFieldBegin('updateWhichSharedNotebookRestrictions', TType.I32, 19)
      oprot.writeI32(self.updateWhichSharedNotebookRestrictions)
      oprot.writeFieldEnd()
    if self.expungeWhichSharedNotebookRestrictions is not None:
      oprot.writeFieldBegin('expungeWhichSharedNotebookRestrictions', TType.I32, 20)
      oprot.writeI32(self.expungeWhichSharedNotebookRestrictions)
      oprot.writeFieldEnd()
    if self.noShareNotesWithBusiness is not None:
      oprot.writeFieldBegin('noShareNotesWithBusiness', TType.BOOL, 21)
      oprot.writeBool(self.noShareNotesWithBusiness)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.noReadNotes)
    value = (value * 31) ^ hash(self.noCreateNotes)
    value = (value * 31) ^ hash(self.noUpdateNotes)
    value = (value * 31) ^ hash(self.noExpungeNotes)
    value = (value * 31) ^ hash(self.noShareNotes)
    value = (value * 31) ^ hash(self.noEmailNotes)
    value = (value * 31) ^ hash(self.noSendMessageToRecipients)
    value = (value * 31) ^ hash(self.noUpdateNotebook)
    value = (value * 31) ^ hash(self.noExpungeNotebook)
    value = (value * 31) ^ hash(self.noSetDefaultNotebook)
    value = (value * 31) ^ hash(self.noSetNotebookStack)
    value = (value * 31) ^ hash(self.noPublishToPublic)
    value = (value * 31) ^ hash(self.noPublishToBusinessLibrary)
    value = (value * 31) ^ hash(self.noCreateTags)
    value = (value * 31) ^ hash(self.noUpdateTags)
    value = (value * 31) ^ hash(self.noExpungeTags)
    value = (value * 31) ^ hash(self.noSetParentTag)
    value = (value * 31) ^ hash(self.noCreateSharedNotebooks)
    value = (value * 31) ^ hash(self.updateWhichSharedNotebookRestrictions)
    value = (value * 31) ^ hash(self.expungeWhichSharedNotebookRestrictions)
    value = (value * 31) ^ hash(self.noShareNotesWithBusiness)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Notebook:
  """
  Attributes:
   - guid
   - name
   - updateSequenceNum
   - defaultNotebook
   - serviceCreated
   - serviceUpdated
   - publishing
   - published
   - stack
   - sharedNotebookIds
   - sharedNotebooks
   - businessNotebook
   - contact
   - restrictions
   - recipientSettings
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'guid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    None, # 3
    None, # 4
    (5, TType.I32, 'updateSequenceNum', None, None, ), # 5
    (6, TType.BOOL, 'defaultNotebook', None, None, ), # 6
    (7, TType.I64, 'serviceCreated', None, None, ), # 7
    (8, TType.I64, 'serviceUpdated', None, None, ), # 8
    None, # 9
    (10, TType.STRUCT, 'publishing', (Publishing, Publishing.thrift_spec), None, ), # 10
    (11, TType.BOOL, 'published', None, None, ), # 11
    (12, TType.STRING, 'stack', None, None, ), # 12
    (13, TType.LIST, 'sharedNotebookIds', (TType.I64,None), None, ), # 13
    (14, TType.LIST, 'sharedNotebooks', (TType.STRUCT,(SharedNotebook, SharedNotebook.thrift_spec)), None, ), # 14
    (15, TType.STRUCT, 'businessNotebook', (BusinessNotebook, BusinessNotebook.thrift_spec), None, ), # 15
    (16, TType.STRUCT, 'contact', (User, User.thrift_spec), None, ), # 16
    (17, TType.STRUCT, 'restrictions', (NotebookRestrictions, NotebookRestrictions.thrift_spec), None, ), # 17
    (18, TType.STRUCT, 'recipientSettings', (NotebookRecipientSettings, NotebookRecipientSettings.thrift_spec), None, ), # 18
  )

  def __init__(self, guid=None, name=None, updateSequenceNum=None, defaultNotebook=None, serviceCreated=None, serviceUpdated=None, publishing=None, published=None, stack=None, sharedNotebookIds=None, sharedNotebooks=None, businessNotebook=None, contact=None, restrictions=None, recipientSettings=None,):
    self.guid = guid
    self.name = name
    self.updateSequenceNum = updateSequenceNum
    self.defaultNotebook = defaultNotebook
    self.serviceCreated = serviceCreated
    self.serviceUpdated = serviceUpdated
    self.publishing = publishing
    self.published = published
    self.stack = stack
    self.sharedNotebookIds = sharedNotebookIds
    self.sharedNotebooks = sharedNotebooks
    self.businessNotebook = businessNotebook
    self.contact = contact
    self.restrictions = restrictions
    self.recipientSettings = recipientSettings

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.guid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.updateSequenceNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.defaultNotebook = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.serviceCreated = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.serviceUpdated = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.publishing = Publishing()
          self.publishing.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.published = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.stack = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.sharedNotebookIds = []
          (_etype77, _size74) = iprot.readListBegin()
          for _i78 in xrange(_size74):
            _elem79 = iprot.readI64();
            self.sharedNotebookIds.append(_elem79)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.sharedNotebooks = []
          (_etype83, _size80) = iprot.readListBegin()
          for _i84 in xrange(_size80):
            _elem85 = SharedNotebook()
            _elem85.read(iprot)
            self.sharedNotebooks.append(_elem85)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRUCT:
          self.businessNotebook = BusinessNotebook()
          self.businessNotebook.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRUCT:
          self.contact = User()
          self.contact.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRUCT:
          self.restrictions = NotebookRestrictions()
          self.restrictions.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRUCT:
          self.recipientSettings = NotebookRecipientSettings()
          self.recipientSettings.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Notebook')
    if self.guid is not None:
      oprot.writeFieldBegin('guid', TType.STRING, 1)
      oprot.writeString(self.guid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.updateSequenceNum is not None:
      oprot.writeFieldBegin('updateSequenceNum', TType.I32, 5)
      oprot.writeI32(self.updateSequenceNum)
      oprot.writeFieldEnd()
    if self.defaultNotebook is not None:
      oprot.writeFieldBegin('defaultNotebook', TType.BOOL, 6)
      oprot.writeBool(self.defaultNotebook)
      oprot.writeFieldEnd()
    if self.serviceCreated is not None:
      oprot.writeFieldBegin('serviceCreated', TType.I64, 7)
      oprot.writeI64(self.serviceCreated)
      oprot.writeFieldEnd()
    if self.serviceUpdated is not None:
      oprot.writeFieldBegin('serviceUpdated', TType.I64, 8)
      oprot.writeI64(self.serviceUpdated)
      oprot.writeFieldEnd()
    if self.publishing is not None:
      oprot.writeFieldBegin('publishing', TType.STRUCT, 10)
      self.publishing.write(oprot)
      oprot.writeFieldEnd()
    if self.published is not None:
      oprot.writeFieldBegin('published', TType.BOOL, 11)
      oprot.writeBool(self.published)
      oprot.writeFieldEnd()
    if self.stack is not None:
      oprot.writeFieldBegin('stack', TType.STRING, 12)
      oprot.writeString(self.stack)
      oprot.writeFieldEnd()
    if self.sharedNotebookIds is not None:
      oprot.writeFieldBegin('sharedNotebookIds', TType.LIST, 13)
      oprot.writeListBegin(TType.I64, len(self.sharedNotebookIds))
      for iter86 in self.sharedNotebookIds:
        oprot.writeI64(iter86)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sharedNotebooks is not None:
      oprot.writeFieldBegin('sharedNotebooks', TType.LIST, 14)
      oprot.writeListBegin(TType.STRUCT, len(self.sharedNotebooks))
      for iter87 in self.sharedNotebooks:
        iter87.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.businessNotebook is not None:
      oprot.writeFieldBegin('businessNotebook', TType.STRUCT, 15)
      self.businessNotebook.write(oprot)
      oprot.writeFieldEnd()
    if self.contact is not None:
      oprot.writeFieldBegin('contact', TType.STRUCT, 16)
      self.contact.write(oprot)
      oprot.writeFieldEnd()
    if self.restrictions is not None:
      oprot.writeFieldBegin('restrictions', TType.STRUCT, 17)
      self.restrictions.write(oprot)
      oprot.writeFieldEnd()
    if self.recipientSettings is not None:
      oprot.writeFieldBegin('recipientSettings', TType.STRUCT, 18)
      self.recipientSettings.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.guid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.updateSequenceNum)
    value = (value * 31) ^ hash(self.defaultNotebook)
    value = (value * 31) ^ hash(self.serviceCreated)
    value = (value * 31) ^ hash(self.serviceUpdated)
    value = (value * 31) ^ hash(self.publishing)
    value = (value * 31) ^ hash(self.published)
    value = (value * 31) ^ hash(self.stack)
    value = (value * 31) ^ hash(self.sharedNotebookIds)
    value = (value * 31) ^ hash(self.sharedNotebooks)
    value = (value * 31) ^ hash(self.businessNotebook)
    value = (value * 31) ^ hash(self.contact)
    value = (value * 31) ^ hash(self.restrictions)
    value = (value * 31) ^ hash(self.recipientSettings)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LinkedNotebook:
  """
  Attributes:
   - shareName
   - username
   - shardId
   - sharedNotebookGlobalId
   - uri
   - guid
   - updateSequenceNum
   - noteStoreUrl
   - webApiUrlPrefix
   - stack
   - businessId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.STRING, 'shareName', None, None, ), # 2
    (3, TType.STRING, 'username', None, None, ), # 3
    (4, TType.STRING, 'shardId', None, None, ), # 4
    (5, TType.STRING, 'sharedNotebookGlobalId', None, None, ), # 5
    (6, TType.STRING, 'uri', None, None, ), # 6
    (7, TType.STRING, 'guid', None, None, ), # 7
    (8, TType.I32, 'updateSequenceNum', None, None, ), # 8
    (9, TType.STRING, 'noteStoreUrl', None, None, ), # 9
    (10, TType.STRING, 'webApiUrlPrefix', None, None, ), # 10
    (11, TType.STRING, 'stack', None, None, ), # 11
    (12, TType.I32, 'businessId', None, None, ), # 12
  )

  def __init__(self, shareName=None, username=None, shardId=None, sharedNotebookGlobalId=None, uri=None, guid=None, updateSequenceNum=None, noteStoreUrl=None, webApiUrlPrefix=None, stack=None, businessId=None,):
    self.shareName = shareName
    self.username = username
    self.shardId = shardId
    self.sharedNotebookGlobalId = sharedNotebookGlobalId
    self.uri = uri
    self.guid = guid
    self.updateSequenceNum = updateSequenceNum
    self.noteStoreUrl = noteStoreUrl
    self.webApiUrlPrefix = webApiUrlPrefix
    self.stack = stack
    self.businessId = businessId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.STRING:
          self.shareName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.shardId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sharedNotebookGlobalId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.uri = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.guid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.updateSequenceNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.noteStoreUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.webApiUrlPrefix = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.stack = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.businessId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LinkedNotebook')
    if self.shareName is not None:
      oprot.writeFieldBegin('shareName', TType.STRING, 2)
      oprot.writeString(self.shareName)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 3)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.shardId is not None:
      oprot.writeFieldBegin('shardId', TType.STRING, 4)
      oprot.writeString(self.shardId)
      oprot.writeFieldEnd()
    if self.sharedNotebookGlobalId is not None:
      oprot.writeFieldBegin('sharedNotebookGlobalId', TType.STRING, 5)
      oprot.writeString(self.sharedNotebookGlobalId)
      oprot.writeFieldEnd()
    if self.uri is not None:
      oprot.writeFieldBegin('uri', TType.STRING, 6)
      oprot.writeString(self.uri)
      oprot.writeFieldEnd()
    if self.guid is not None:
      oprot.writeFieldBegin('guid', TType.STRING, 7)
      oprot.writeString(self.guid)
      oprot.writeFieldEnd()
    if self.updateSequenceNum is not None:
      oprot.writeFieldBegin('updateSequenceNum', TType.I32, 8)
      oprot.writeI32(self.updateSequenceNum)
      oprot.writeFieldEnd()
    if self.noteStoreUrl is not None:
      oprot.writeFieldBegin('noteStoreUrl', TType.STRING, 9)
      oprot.writeString(self.noteStoreUrl)
      oprot.writeFieldEnd()
    if self.webApiUrlPrefix is not None:
      oprot.writeFieldBegin('webApiUrlPrefix', TType.STRING, 10)
      oprot.writeString(self.webApiUrlPrefix)
      oprot.writeFieldEnd()
    if self.stack is not None:
      oprot.writeFieldBegin('stack', TType.STRING, 11)
      oprot.writeString(self.stack)
      oprot.writeFieldEnd()
    if self.businessId is not None:
      oprot.writeFieldBegin('businessId', TType.I32, 12)
      oprot.writeI32(self.businessId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.shareName)
    value = (value * 31) ^ hash(self.username)
    value = (value * 31) ^ hash(self.shardId)
    value = (value * 31) ^ hash(self.sharedNotebookGlobalId)
    value = (value * 31) ^ hash(self.uri)
    value = (value * 31) ^ hash(self.guid)
    value = (value * 31) ^ hash(self.updateSequenceNum)
    value = (value * 31) ^ hash(self.noteStoreUrl)
    value = (value * 31) ^ hash(self.webApiUrlPrefix)
    value = (value * 31) ^ hash(self.stack)
    value = (value * 31) ^ hash(self.businessId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NotebookDescriptor:
  """
  Attributes:
   - guid
   - notebookDisplayName
   - contactName
   - hasSharedNotebook
   - joinedUserCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'guid', None, None, ), # 1
    (2, TType.STRING, 'notebookDisplayName', None, None, ), # 2
    (3, TType.STRING, 'contactName', None, None, ), # 3
    (4, TType.BOOL, 'hasSharedNotebook', None, None, ), # 4
    (5, TType.I32, 'joinedUserCount', None, None, ), # 5
  )

  def __init__(self, guid=None, notebookDisplayName=None, contactName=None, hasSharedNotebook=None, joinedUserCount=None,):
    self.guid = guid
    self.notebookDisplayName = notebookDisplayName
    self.contactName = contactName
    self.hasSharedNotebook = hasSharedNotebook
    self.joinedUserCount = joinedUserCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.guid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.notebookDisplayName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.contactName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.hasSharedNotebook = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.joinedUserCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NotebookDescriptor')
    if self.guid is not None:
      oprot.writeFieldBegin('guid', TType.STRING, 1)
      oprot.writeString(self.guid)
      oprot.writeFieldEnd()
    if self.notebookDisplayName is not None:
      oprot.writeFieldBegin('notebookDisplayName', TType.STRING, 2)
      oprot.writeString(self.notebookDisplayName)
      oprot.writeFieldEnd()
    if self.contactName is not None:
      oprot.writeFieldBegin('contactName', TType.STRING, 3)
      oprot.writeString(self.contactName)
      oprot.writeFieldEnd()
    if self.hasSharedNotebook is not None:
      oprot.writeFieldBegin('hasSharedNotebook', TType.BOOL, 4)
      oprot.writeBool(self.hasSharedNotebook)
      oprot.writeFieldEnd()
    if self.joinedUserCount is not None:
      oprot.writeFieldBegin('joinedUserCount', TType.I32, 5)
      oprot.writeI32(self.joinedUserCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.guid)
    value = (value * 31) ^ hash(self.notebookDisplayName)
    value = (value * 31) ^ hash(self.contactName)
    value = (value * 31) ^ hash(self.hasSharedNotebook)
    value = (value * 31) ^ hash(self.joinedUserCount)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserProfile:
  """
  Attributes:
   - id
   - name
   - email
   - username
   - attributes
   - joined
   - photoLastUpdated
   - photoUrl
   - role
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'email', None, None, ), # 3
    (4, TType.STRING, 'username', None, None, ), # 4
    (5, TType.STRUCT, 'attributes', (BusinessUserAttributes, BusinessUserAttributes.thrift_spec), None, ), # 5
    (6, TType.I64, 'joined', None, None, ), # 6
    (7, TType.I64, 'photoLastUpdated', None, None, ), # 7
    (8, TType.STRING, 'photoUrl', None, None, ), # 8
    (9, TType.I32, 'role', None, None, ), # 9
  )

  def __init__(self, id=None, name=None, email=None, username=None, attributes=None, joined=None, photoLastUpdated=None, photoUrl=None, role=None,):
    self.id = id
    self.name = name
    self.email = email
    self.username = username
    self.attributes = attributes
    self.joined = joined
    self.photoLastUpdated = photoLastUpdated
    self.photoUrl = photoUrl
    self.role = role

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.username = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.attributes = BusinessUserAttributes()
          self.attributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.joined = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.photoLastUpdated = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.photoUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.role = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserProfile')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 3)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 4)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.attributes is not None:
      oprot.writeFieldBegin('attributes', TType.STRUCT, 5)
      self.attributes.write(oprot)
      oprot.writeFieldEnd()
    if self.joined is not None:
      oprot.writeFieldBegin('joined', TType.I64, 6)
      oprot.writeI64(self.joined)
      oprot.writeFieldEnd()
    if self.photoLastUpdated is not None:
      oprot.writeFieldBegin('photoLastUpdated', TType.I64, 7)
      oprot.writeI64(self.photoLastUpdated)
      oprot.writeFieldEnd()
    if self.photoUrl is not None:
      oprot.writeFieldBegin('photoUrl', TType.STRING, 8)
      oprot.writeString(self.photoUrl)
      oprot.writeFieldEnd()
    if self.role is not None:
      oprot.writeFieldBegin('role', TType.I32, 9)
      oprot.writeI32(self.role)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.email)
    value = (value * 31) ^ hash(self.username)
    value = (value * 31) ^ hash(self.attributes)
    value = (value * 31) ^ hash(self.joined)
    value = (value * 31) ^ hash(self.photoLastUpdated)
    value = (value * 31) ^ hash(self.photoUrl)
    value = (value * 31) ^ hash(self.role)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RelatedContentImage:
  """
  Attributes:
   - url
   - width
   - height
   - pixelRatio
   - fileSize
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'url', None, None, ), # 1
    (2, TType.I32, 'width', None, None, ), # 2
    (3, TType.I32, 'height', None, None, ), # 3
    (4, TType.DOUBLE, 'pixelRatio', None, None, ), # 4
    (5, TType.I32, 'fileSize', None, None, ), # 5
  )

  def __init__(self, url=None, width=None, height=None, pixelRatio=None, fileSize=None,):
    self.url = url
    self.width = width
    self.height = height
    self.pixelRatio = pixelRatio
    self.fileSize = fileSize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.width = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.height = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.pixelRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.fileSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RelatedContentImage')
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 1)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.width is not None:
      oprot.writeFieldBegin('width', TType.I32, 2)
      oprot.writeI32(self.width)
      oprot.writeFieldEnd()
    if self.height is not None:
      oprot.writeFieldBegin('height', TType.I32, 3)
      oprot.writeI32(self.height)
      oprot.writeFieldEnd()
    if self.pixelRatio is not None:
      oprot.writeFieldBegin('pixelRatio', TType.DOUBLE, 4)
      oprot.writeDouble(self.pixelRatio)
      oprot.writeFieldEnd()
    if self.fileSize is not None:
      oprot.writeFieldBegin('fileSize', TType.I32, 5)
      oprot.writeI32(self.fileSize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.url)
    value = (value * 31) ^ hash(self.width)
    value = (value * 31) ^ hash(self.height)
    value = (value * 31) ^ hash(self.pixelRatio)
    value = (value * 31) ^ hash(self.fileSize)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RelatedContent:
  """
  Attributes:
   - contentId
   - title
   - url
   - sourceId
   - sourceUrl
   - sourceFaviconUrl
   - sourceName
   - date
   - teaser
   - thumbnails
   - contentType
   - accessType
   - visibleUrl
   - clipUrl
   - contact
   - authors
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'contentId', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.STRING, 'url', None, None, ), # 3
    (4, TType.STRING, 'sourceId', None, None, ), # 4
    (5, TType.STRING, 'sourceUrl', None, None, ), # 5
    (6, TType.STRING, 'sourceFaviconUrl', None, None, ), # 6
    (7, TType.STRING, 'sourceName', None, None, ), # 7
    (8, TType.I64, 'date', None, None, ), # 8
    (9, TType.STRING, 'teaser', None, None, ), # 9
    (10, TType.LIST, 'thumbnails', (TType.STRUCT,(RelatedContentImage, RelatedContentImage.thrift_spec)), None, ), # 10
    (11, TType.I32, 'contentType', None, None, ), # 11
    (12, TType.I32, 'accessType', None, None, ), # 12
    (13, TType.STRING, 'visibleUrl', None, None, ), # 13
    (14, TType.STRING, 'clipUrl', None, None, ), # 14
    (15, TType.STRUCT, 'contact', (Contact, Contact.thrift_spec), None, ), # 15
    (16, TType.LIST, 'authors', (TType.STRING,None), None, ), # 16
  )

  def __init__(self, contentId=None, title=None, url=None, sourceId=None, sourceUrl=None, sourceFaviconUrl=None, sourceName=None, date=None, teaser=None, thumbnails=None, contentType=None, accessType=None, visibleUrl=None, clipUrl=None, contact=None, authors=None,):
    self.contentId = contentId
    self.title = title
    self.url = url
    self.sourceId = sourceId
    self.sourceUrl = sourceUrl
    self.sourceFaviconUrl = sourceFaviconUrl
    self.sourceName = sourceName
    self.date = date
    self.teaser = teaser
    self.thumbnails = thumbnails
    self.contentType = contentType
    self.accessType = accessType
    self.visibleUrl = visibleUrl
    self.clipUrl = clipUrl
    self.contact = contact
    self.authors = authors

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.contentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sourceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sourceUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.sourceFaviconUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.sourceName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.teaser = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.thumbnails = []
          (_etype91, _size88) = iprot.readListBegin()
          for _i92 in xrange(_size88):
            _elem93 = RelatedContentImage()
            _elem93.read(iprot)
            self.thumbnails.append(_elem93)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.contentType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.accessType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.visibleUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.clipUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRUCT:
          self.contact = Contact()
          self.contact.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.authors = []
          (_etype97, _size94) = iprot.readListBegin()
          for _i98 in xrange(_size94):
            _elem99 = iprot.readString();
            self.authors.append(_elem99)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RelatedContent')
    if self.contentId is not None:
      oprot.writeFieldBegin('contentId', TType.STRING, 1)
      oprot.writeString(self.contentId)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 3)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.sourceId is not None:
      oprot.writeFieldBegin('sourceId', TType.STRING, 4)
      oprot.writeString(self.sourceId)
      oprot.writeFieldEnd()
    if self.sourceUrl is not None:
      oprot.writeFieldBegin('sourceUrl', TType.STRING, 5)
      oprot.writeString(self.sourceUrl)
      oprot.writeFieldEnd()
    if self.sourceFaviconUrl is not None:
      oprot.writeFieldBegin('sourceFaviconUrl', TType.STRING, 6)
      oprot.writeString(self.sourceFaviconUrl)
      oprot.writeFieldEnd()
    if self.sourceName is not None:
      oprot.writeFieldBegin('sourceName', TType.STRING, 7)
      oprot.writeString(self.sourceName)
      oprot.writeFieldEnd()
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.I64, 8)
      oprot.writeI64(self.date)
      oprot.writeFieldEnd()
    if self.teaser is not None:
      oprot.writeFieldBegin('teaser', TType.STRING, 9)
      oprot.writeString(self.teaser)
      oprot.writeFieldEnd()
    if self.thumbnails is not None:
      oprot.writeFieldBegin('thumbnails', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.thumbnails))
      for iter100 in self.thumbnails:
        iter100.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.contentType is not None:
      oprot.writeFieldBegin('contentType', TType.I32, 11)
      oprot.writeI32(self.contentType)
      oprot.writeFieldEnd()
    if self.accessType is not None:
      oprot.writeFieldBegin('accessType', TType.I32, 12)
      oprot.writeI32(self.accessType)
      oprot.writeFieldEnd()
    if self.visibleUrl is not None:
      oprot.writeFieldBegin('visibleUrl', TType.STRING, 13)
      oprot.writeString(self.visibleUrl)
      oprot.writeFieldEnd()
    if self.clipUrl is not None:
      oprot.writeFieldBegin('clipUrl', TType.STRING, 14)
      oprot.writeString(self.clipUrl)
      oprot.writeFieldEnd()
    if self.contact is not None:
      oprot.writeFieldBegin('contact', TType.STRUCT, 15)
      self.contact.write(oprot)
      oprot.writeFieldEnd()
    if self.authors is not None:
      oprot.writeFieldBegin('authors', TType.LIST, 16)
      oprot.writeListBegin(TType.STRING, len(self.authors))
      for iter101 in self.authors:
        oprot.writeString(iter101)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.contentId)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.url)
    value = (value * 31) ^ hash(self.sourceId)
    value = (value * 31) ^ hash(self.sourceUrl)
    value = (value * 31) ^ hash(self.sourceFaviconUrl)
    value = (value * 31) ^ hash(self.sourceName)
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.teaser)
    value = (value * 31) ^ hash(self.thumbnails)
    value = (value * 31) ^ hash(self.contentType)
    value = (value * 31) ^ hash(self.accessType)
    value = (value * 31) ^ hash(self.visibleUrl)
    value = (value * 31) ^ hash(self.clipUrl)
    value = (value * 31) ^ hash(self.contact)
    value = (value * 31) ^ hash(self.authors)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BusinessInvitation:
  """
  Attributes:
   - businessId
   - email
   - role
   - status
   - requesterId
   - fromWorkChat
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'businessId', None, None, ), # 1
    (2, TType.STRING, 'email', None, None, ), # 2
    (3, TType.I32, 'role', None, None, ), # 3
    (4, TType.I32, 'status', None, None, ), # 4
    (5, TType.I32, 'requesterId', None, None, ), # 5
    (6, TType.BOOL, 'fromWorkChat', None, None, ), # 6
  )

  def __init__(self, businessId=None, email=None, role=None, status=None, requesterId=None, fromWorkChat=None,):
    self.businessId = businessId
    self.email = email
    self.role = role
    self.status = status
    self.requesterId = requesterId
    self.fromWorkChat = fromWorkChat

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.businessId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.role = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.requesterId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.fromWorkChat = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BusinessInvitation')
    if self.businessId is not None:
      oprot.writeFieldBegin('businessId', TType.I32, 1)
      oprot.writeI32(self.businessId)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 2)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.role is not None:
      oprot.writeFieldBegin('role', TType.I32, 3)
      oprot.writeI32(self.role)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.requesterId is not None:
      oprot.writeFieldBegin('requesterId', TType.I32, 5)
      oprot.writeI32(self.requesterId)
      oprot.writeFieldEnd()
    if self.fromWorkChat is not None:
      oprot.writeFieldBegin('fromWorkChat', TType.BOOL, 6)
      oprot.writeBool(self.fromWorkChat)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.businessId)
    value = (value * 31) ^ hash(self.email)
    value = (value * 31) ^ hash(self.role)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.requesterId)
    value = (value * 31) ^ hash(self.fromWorkChat)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserIdentity:
  """
  Attributes:
   - type
   - stringIdentifier
   - longIdentifier
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.STRING, 'stringIdentifier', None, None, ), # 2
    (3, TType.I64, 'longIdentifier', None, None, ), # 3
  )

  def __init__(self, type=None, stringIdentifier=None, longIdentifier=None,):
    self.type = type
    self.stringIdentifier = stringIdentifier
    self.longIdentifier = longIdentifier

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.stringIdentifier = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.longIdentifier = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserIdentity')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.stringIdentifier is not None:
      oprot.writeFieldBegin('stringIdentifier', TType.STRING, 2)
      oprot.writeString(self.stringIdentifier)
      oprot.writeFieldEnd()
    if self.longIdentifier is not None:
      oprot.writeFieldBegin('longIdentifier', TType.I64, 3)
      oprot.writeI64(self.longIdentifier)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.stringIdentifier)
    value = (value * 31) ^ hash(self.longIdentifier)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
