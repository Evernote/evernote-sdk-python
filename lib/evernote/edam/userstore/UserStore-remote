#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from evernote.edam.userstore import UserStore
from evernote.edam.userstore.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  bool checkVersion(string clientName, i16 edamVersionMajor, i16 edamVersionMinor)')
    print('  BootstrapInfo getBootstrapInfo(string locale)')
    print('  AuthenticationResult authenticateLongSession(string username, string password, string consumerKey, string consumerSecret, string deviceIdentifier, string deviceDescription, bool supportsTwoFactor)')
    print('  AuthenticationResult completeTwoFactorAuthentication(string authenticationToken, string oneTimeCode, string deviceIdentifier, string deviceDescription)')
    print('  void revokeLongSession(string authenticationToken)')
    print('  AuthenticationResult authenticateToBusiness(string authenticationToken)')
    print('  User getUser(string authenticationToken)')
    print('  PublicUserInfo getPublicUserInfo(string username)')
    print('  UserUrls getUserUrls(string authenticationToken)')
    print('  void inviteToBusiness(string authenticationToken, string emailAddress)')
    print('  void removeFromBusiness(string authenticationToken, string emailAddress)')
    print('  void updateBusinessUserIdentifier(string authenticationToken, string oldEmailAddress, string newEmailAddress)')
    print('   listBusinessUsers(string authenticationToken)')
    print('   listBusinessInvitations(string authenticationToken, bool includeRequestedInvitations)')
    print('  AccountLimits getAccountLimits(ServiceLevel serviceLevel)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = UserStore.Client(protocol)
transport.open()

if cmd == 'checkVersion':
    if len(args) != 3:
        print('checkVersion requires 3 args')
        sys.exit(1)
    pp.pprint(client.checkVersion(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'getBootstrapInfo':
    if len(args) != 1:
        print('getBootstrapInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.getBootstrapInfo(args[0],))

elif cmd == 'authenticateLongSession':
    if len(args) != 7:
        print('authenticateLongSession requires 7 args')
        sys.exit(1)
    pp.pprint(client.authenticateLongSession(args[0], args[1], args[2], args[3], args[4], args[5], eval(args[6]),))

elif cmd == 'completeTwoFactorAuthentication':
    if len(args) != 4:
        print('completeTwoFactorAuthentication requires 4 args')
        sys.exit(1)
    pp.pprint(client.completeTwoFactorAuthentication(args[0], args[1], args[2], args[3],))

elif cmd == 'revokeLongSession':
    if len(args) != 1:
        print('revokeLongSession requires 1 args')
        sys.exit(1)
    pp.pprint(client.revokeLongSession(args[0],))

elif cmd == 'authenticateToBusiness':
    if len(args) != 1:
        print('authenticateToBusiness requires 1 args')
        sys.exit(1)
    pp.pprint(client.authenticateToBusiness(args[0],))

elif cmd == 'getUser':
    if len(args) != 1:
        print('getUser requires 1 args')
        sys.exit(1)
    pp.pprint(client.getUser(args[0],))

elif cmd == 'getPublicUserInfo':
    if len(args) != 1:
        print('getPublicUserInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.getPublicUserInfo(args[0],))

elif cmd == 'getUserUrls':
    if len(args) != 1:
        print('getUserUrls requires 1 args')
        sys.exit(1)
    pp.pprint(client.getUserUrls(args[0],))

elif cmd == 'inviteToBusiness':
    if len(args) != 2:
        print('inviteToBusiness requires 2 args')
        sys.exit(1)
    pp.pprint(client.inviteToBusiness(args[0], args[1],))

elif cmd == 'removeFromBusiness':
    if len(args) != 2:
        print('removeFromBusiness requires 2 args')
        sys.exit(1)
    pp.pprint(client.removeFromBusiness(args[0], args[1],))

elif cmd == 'updateBusinessUserIdentifier':
    if len(args) != 3:
        print('updateBusinessUserIdentifier requires 3 args')
        sys.exit(1)
    pp.pprint(client.updateBusinessUserIdentifier(args[0], args[1], args[2],))

elif cmd == 'listBusinessUsers':
    if len(args) != 1:
        print('listBusinessUsers requires 1 args')
        sys.exit(1)
    pp.pprint(client.listBusinessUsers(args[0],))

elif cmd == 'listBusinessInvitations':
    if len(args) != 2:
        print('listBusinessInvitations requires 2 args')
        sys.exit(1)
    pp.pprint(client.listBusinessInvitations(args[0], eval(args[1]),))

elif cmd == 'getAccountLimits':
    if len(args) != 1:
        print('getAccountLimits requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAccountLimits(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
